-- phpMyAdmin SQL Dump
-- version 5.1.1
-- https://www.phpmyadmin.net/
--
-- Host: 127.0.0.1
-- Generation Time: Apr 30, 2022 at 02:38 PM
-- Server version: 10.4.22-MariaDB
-- PHP Version: 7.4.26

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- Database: `codedabble`
--

-- --------------------------------------------------------

--
-- Table structure for table `forumquestion`
--

CREATE TABLE `forumquestion` (
  `id` int(11) NOT NULL,
  `forum_title` text NOT NULL,
  `forum_body` text NOT NULL,
  `slug` varchar(255) NOT NULL,
  `user_id` int(11) NOT NULL,
  `created_at` datetime NOT NULL DEFAULT current_timestamp()
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `forumquestion`
--

INSERT INTO `forumquestion` (`id`, `forum_title`, `forum_body`, `slug`, `user_id`, `created_at`) VALUES
(116, 'Select only one column from multiple rows in codeigniter. How to and is this more efficient?', '<p>I\'m thinking about efficiency, and I\'m not really sure about it one way or another.</p>\r\n<p>But I have a bunch of rows with multiple columns. I just need the name field from all the rows where a certain other key is a certain value. I can get all these rows like this:</p>\r\n<pre class=\"language-php\"><code>$this-&gt;db-&gt;where(\'res_id\', $res_id);\r\n$q = $this-&gt;db-&gt;get(\'products\');\r\nreturn $q-&gt;result();</code></pre>\r\n<p>then i can foreach through the array that it returns and only use name method of each object liek this:</p>\r\n<pre class=\"language-php\"><code>foreach($returned_value as $fun):\r\n    echo $fun-&gt;name;\r\nendforeach;</code></pre>\r\n<p>But I\'m wondering, would it be more efficient to only select the name attribute from each row, and I feel stupid asking it cause I\'ve been using active record forever, but how would I go about this. I realize I could write it out using the&nbsp;<code>$this-&gt;db-&gt;query()</code>&nbsp;function, but is there a way to specify it using the main active record commands? Thanks.</p>', 'Select-only-one-column-from-multiple-rows-in-codeigniter-How-to-and-is-this-more-efficient', 28, '2022-04-27 07:44:19'),
(117, 'How to make my navigation sticky without using javascript', '<p>I working on a project where im trying to make my navigation sitcky so that it moves when you scroll the page. I was able to make a side nav sticky by putting it as a three column row next to my other content. I made a guard rail so that it scrolls with in the certain boundary. I just hid the guard rail by making it the same color as my background. If its possible i would like to do the same thing with my navigation that is at the top of my page. However there is content on my page that will be hiddent behind my guardrail.</p>\r\n<p>html</p>\r\n<pre class=\"language-markup\"><code>&lt;div class=\"top-nav\"&gt;\r\n&lt;header&gt;\r\n  &lt;nav class=\"header-nav\"&gt;\r\n    &lt;ul class=\"darkgray-box\"&gt;\r\n\r\n      &lt;li class=\"tablet\"&gt;&lt;a href=\"#\" target=\"_blank\"&gt;Home&lt;/a&gt;&lt;/li&gt;\r\n      &lt;li class=\"tablet\"&gt;&lt;a href=\"#\" target=\"_blank\"&gt;About&lt;/a&gt;&lt;/li&gt;\r\n      &lt;li class=\"tablet\"&gt;&lt;a href=\"#\" target=\"_blank\"&gt;Gallery&lt;/a&gt;&lt;/li&gt;\r\n      &lt;li class=\"tablet\"&gt;&lt;a href=\"#\" target=\"_blank\"&gt;Calendar&lt;/a&gt;&lt;/li&gt;\r\n      &lt;li class=\"tablet\"&gt;&lt;a href=\"#\" target=\"_blank\"&gt;Contact&lt;/a&gt;&lt;/li&gt;\r\n\r\n    &lt;/ul&gt;\r\n  &lt;/nav&gt;\r\n\r\n  &lt;nav class=\"social-nav\"&gt;\r\n    &lt;a class=\"facebook\" href=\"https://facebook.com\"&gt;&lt;i class=\"fa fa-facebook-official\" aria-hidden=\"true\"&gt;&lt;/i&gt;&lt;/a&gt;\r\n    &lt;a class=\"twitter\" href=\"https://twitter.com\"&gt;&lt;i class=\"fa fa-twitter\" aria-hidden=\"true\"&gt;&lt;/i&gt;&lt;/a&gt;\r\n    &lt;a class=\"instagram\" href=\"https://instagram.com\"&gt;&lt;i class=\"fa fa-instagram\" aria-hidden=\"true\"&gt;&lt;/i&gt;&lt;/a&gt;\r\n  &lt;/nav&gt;\r\n&lt;/header&gt;</code></pre>\r\n<p>css</p>\r\n<pre class=\"language-markup\"><code> .header-nav{\r\n       float: center;\r\n       height: 300vh;\r\n   \r\n   }\r\n\r\n   .darkgray-box{\r\n       position: sticky;\r\n       top: 10px;\r\n   }</code></pre>', 'How-to-make-my-navigation-sticky-without-using-javascript', 28, '2022-04-27 08:17:44'),
(118, 'No overload matches this call Discord.js MessageComponentCollector', '<p>I\'m trying to code a tictactoe command for my Discord bot in TypeScript. I want that if someone other than the current turn\'s player interact with the buttons, it simply returns a reply.<br>The problem is that in the&nbsp;<code>collector.on(\"collect\")</code>&nbsp;event if I put a return, the compiler gives this error:</p>\r\n<pre class=\"lang-js s-code-block\"><code class=\"hljs language-javascript\"><span class=\"hljs-title class_\">No</span> overload matches <span class=\"hljs-variable language_\">this</span> c</code></pre>\r\n<pre class=\"language-markup\"><code>No overload matches this call.\r\n  Overload 1 of 3, \'(event: \"end\", listener: (collected: Collection&lt;string, MessageComponentInteraction&lt;CacheType&gt;&gt;, reason: string) =&gt; Awaitable&lt;void&gt;): InteractionCollector&lt;...&gt;\', gave the following error.\r\n    Argument of type \'\"collect\"\' is not assignable to parameter of type \'\"end\"\'.\r\n  Overload 2 of 3, \'(event: \"dispose\" | \"collect\", listener: (interaction: MessageComponentInteraction&lt;CacheType&gt;) =&gt; Awaitable&lt;void&gt;): InteractionCollector&lt;...&gt;\', gave the following error.</code></pre>\r\n<p>and others very similar to this, but too long to write here. The question is, what does this mean? And what can I do to avoid the problem? Thank you! Full code:</p>\r\n<pre class=\"language-markup\"><code>import { MessageActionRow, MessageButton, MessageComponentInteraction } from \"discord.js\";\r\nimport { Command } from \"../../structures/Command\";\r\n\r\nexport default new Command({\r\n    name: \"tictactoe\",\r\n    description: \"Play a game of tic tac toe with another user!\",\r\n    options: [\r\n        {\r\n            name: \"user\",\r\n            description: \"The user you want to play with.\",\r\n            type: \"USER\",\r\n            required: true,\r\n        },\r\n    ],\r\n\r\n    run: async({ interaction }) =&gt; {\r\n\r\n        const user = interaction.options.get(\"user\").user;\r\n\r\n        const players: Array&lt;string&gt; = [\r\n            interaction.user.username,\r\n            user.username\r\n        ];\r\n\r\n        const first_row: MessageActionRow = new MessageActionRow();\r\n        const second_row: MessageActionRow = new MessageActionRow();\r\n        const third_row: MessageActionRow = new MessageActionRow();\r\n\r\n        for (let i = 1; i &lt;= 9; i++) {\r\n            if (i &lt;= 3) {\r\n                first_row.addComponents(\r\n                    new MessageButton().setCustomId(String(i)).setLabel(\" \").setStyle(\"SECONDARY\")\r\n                );\r\n            } else if (i &lt;= 6) {\r\n                second_row.addComponents(\r\n                    new MessageButton().setCustomId(String(i)).setLabel(\" \").setStyle(\"SECONDARY\")\r\n                );\r\n            } else {\r\n                third_row.addComponents(\r\n                    new MessageButton().setCustomId(String(i)).setLabel(\" \").setStyle(\"SECONDARY\")\r\n                );\r\n            }\r\n        }\r\n\r\n        interaction.editReply({\r\n            content: `**${players[0]} : X**\\n**${players[1]} : O**`,\r\n            components: [first_row, second_row, third_row],\r\n        });\r\n\r\n        const filter = (i: MessageComponentInteraction) =&gt; i.user.id == interaction.user.id || i.user.id == user.id;\r\n        const collector = interaction.channel.createMessageComponentCollector({ filter, time: 60000, max: 9 });\r\n\r\n        let now: number = 0;\r\n\r\n        collector.on(\"collect\", async i =&gt; {\r\n            await i.deferUpdate();\r\n\r\n            if (i.user.username == players[now]) return i.editReply(`${players[now]} this is not your turn!`);\r\n\r\n            const index: string = i.customId;\r\n            \r\n            for (let i = 0; i &lt;= 9; i++) {\r\n                if (String(i) == index) {\r\n                    if (i &lt;= 3) {\r\n                        (first_row.components[i - 1] as MessageButton).setStyle(\"SUCCESS\");\r\n                    } else if (i &lt;= 6) {\r\n                        (second_row.components[i - 4] as MessageButton).setStyle(\"SUCCESS\");\r\n                    } else {\r\n                        (third_row.components[i - 7] as MessageButton).setStyle(\"SUCCESS\");\r\n                    }\r\n                }\r\n            }\r\n\r\n            i.editReply({\r\n                content: `**${players[0]} : X**\\n**${players[1]} : O**`,\r\n                components: [first_row, second_row, third_row],\r\n            });\r\n        });\r\n    }\r\n});</code></pre>', 'No-overload-matches-this-call-Discordjs-MessageComponentCollector', 28, '2022-04-27 08:18:53'),
(119, 'How to build nested query in Elasticsearch to Java', '<p>How can I build this elasticsearch query on Java.This is my query</p>\r\n<pre class=\"language-markup\"><code>{\r\n    \"query\": {\r\n        \"bool\": {\r\n            \"must_not\": {\r\n                \"nested\": {\r\n                    \"path\": \"myField\",\r\n                    \"query\": {\r\n                        \"exists\": {\r\n                            \"field\": \"myField.id\"\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}</code></pre>\r\n<p>My mapping like this:</p>\r\n<pre class=\"language-markup\"><code>\"myField\": {\r\n   \"type\": \"nested\",\r\n   \"properties\": {\r\n      \"id\": {\r\n         \"type\": \"text\",\r\n         \"fields\": {\r\n            \"keyword\": {\r\n               \"type\": \"keyword\",\r\n               \"ignore_above\": 256\r\n            }\r\n         }\r\n      }\r\n   }\r\n}</code></pre>\r\n<p>I trust recently work with elastic. So hope you guys help me</p>', 'How-to-build-nested-query-in-Elasticsearch-to-Java', 28, '2022-04-27 08:21:07'),
(120, 'Is there a way to access web.xml properties from a Java Bean?', '<p>Is there any way in the Servlet API to access properties specified in web.xml (such as initialization parameters) from within a Bean or Factory class that is not associated at all with the web container?</p>\r\n<p>For example, I\'m writing a Factory class, and I\'d like to include some logic within the Factory to check a hierarchy of files and configuration locations to see which if any are available to determine which implementation class to instantiate - for example,</p>\r\n<ol>\r\n<li>a properties file in the classpath,</li>\r\n<li>a web.xml parameter,</li>\r\n<li>a system property, or</li>\r\n<li>some default logic if nothing else is available.</li>\r\n</ol>\r\n<p>I\'d like to be able to do this without injecting any reference to&nbsp;<code>ServletConfig</code>&nbsp;or anything similiar to my Factory - the code should be able to run ok outside of a Servlet Container.</p>\r\n<p>This might sound a little bit uncommon, but I\'d like for this component I\'m working on to be able to be packaged with one of our webapps, and also be versatile enough to be packaged with some of our command-line tools without requiring a new properties file just for my component - so I was hoping to piggyback on top of other configuration files such as web.xml.</p>\r\n<p>If I recall correctly, .NET has something like&nbsp;<code>Request.GetCurrentRequest()</code>&nbsp;to get a reference to the currently executing&nbsp;<code>Request</code>&nbsp;- but since this is a Java app I\'m looking for something simliar that could be used to gain access to&nbsp;<code>ServletConfig</code>.</p>', 'Is-there-a-way-to-access-webxml-properties-from-a-Java-Bean', 28, '2022-04-27 08:41:39'),
(121, 'Recommended Source Control Directory Structure?', '<p>I am going to be using Subversion for source control on a new J2EE web application. What directory structure will you recommend for organizing code, tests and documentation?</p>', 'Recommended-Source-Control-Directory-Structure', 29, '2022-04-27 08:43:48'),
(122, 'Java and SQLite', '<p>I\'m attracted to the neatness that a single file database provides. What driver/connector library is out there to connect and use SQLite with Java.</p>\r\n<p>I\'ve discovered a wrapper library,&nbsp;<a href=\"http://www.ch-werner.de/javasqlite/\" rel=\"noreferrer\">http://www.ch-werner.de/javasqlite</a>, but are there other more prominent projects available?</p>', 'Java-and-SQLite', 29, '2022-04-27 08:45:53'),
(123, 'Is Java \"pass-by-reference\" or \"pass-by-value\"?', '<p>I always thought Java uses&nbsp;<strong>pass-by-reference</strong>.</p>\r\n<p>However, I\'ve seen&nbsp;<a href=\"http://javadude.com/articles/passbyvalue.htm\" rel=\"noreferrer\">a blog post</a>&nbsp;that claims that Java uses&nbsp;<strong>pass-by-value</strong>.</p>\r\n<p>I don\'t think I understand the distinction they\'re making.</p>\r\n<p>What is the explanation?</p>', 'Is-Java-pass-by-reference-or-pass-by-value', 28, '2022-04-27 08:53:28'),
(124, 'How to find a Java Memory Leak', '<p>How do you find a memory leak in Java (using, for example, JHat)? I have tried to load the heap dump up in JHat to take a basic look. However, I do not understand how I am supposed to be able to find the root reference (<a href=\"https://stackoverflow.com/questions/104/anatomy-of-a-memory-leak\">ref</a>) or whatever it is called. Basically, I can tell that there are several hundred megabytes of hash table entries ([java.util.HashMap$Entry or something like that), but maps are used all over the place... Is there some way to search for large maps, or perhaps find general roots of large object trees?</p>\r\n<p>[Edit] Ok, I\'ve read the answers so far but let\'s just say I am a cheap bastard (meaning I am more interested in learning how to use JHat than to pay for JProfiler). Also, JHat is always available since it is part of the JDK. Unless of course there is no way with JHat but brute force, but I can\'t believe that can be the case.</p>\r\n<p>Also, I do not think I will be able to actually modify (adding logging of&nbsp;<em>all</em>&nbsp;map sizes) and run it for long enough for me to notice the leak.</p>', 'How-to-find-a-Java-Memory-Leak', 28, '2022-04-27 08:54:28'),
(125, 'Similar thing to RJS (used in Ruby on Rails) in the Java web app world?', '<p>In Ruby on Rails, there\'s RJS templates that help do AJAX by returning javascript code that will be executed in the client browser. How can I do a similar thing in the Java/J2EE world? Is Google Widget Toolkit similar to RJS? What options do I have?</p>', 'Similar-thing-to-RJS-used-in-Ruby-on-Rails-in-the-Java-web-app-world', 29, '2022-04-27 08:59:17'),
(126, 'Way to read Windows EventLog with Java', '<p>Does anyone have any pointers on how to read the Windows EventLog without using JNI? Or if you&nbsp;<em>have to</em>&nbsp;use JNI, are there any good open-source libraries for doing so?</p>', 'Way-to-read-Windows-EventLog-with-Java', 29, '2022-04-27 09:00:21'),
(127, 'Getting java and flash to talk to each other', '<p>I have an application written in java, and I want to add a flash front end to it. The flash front end will run on the same computer as the java app in the stand alone flash player. I need two way communication between the two parts, and have no idea how to even start going about this. I suppose I could open a socket between the two programs, but I feel that there must be an easier way. Is there a nice part of the api in actionscript 3.0 that will allow me to access java methods directly, or will I have to resort to sockets? I am relatively new to flash, by the way, so any good guides would be much appreciated!</p>\r\n<p>Thanks</p>', 'Getting-java-and-flash-to-talk-to-each-other', 29, '2022-04-27 09:00:57'),
(128, 'How can I prevent Java from creating hsperfdata files?', '<p>I\'m writing a Java application that runs on Linux (using Sun\'s JDK). It keeps creating&nbsp;<code>/tmp/hsperfdata_username</code>&nbsp;directories, which I would like to prevent. Is there any way to stop java from creating these files?</p>', 'How-can-I-prevent-Java-from-creating-hsperfdata-files', 29, '2022-04-27 09:02:03'),
(129, 'What\'s the best way to return variables from a syncExec?', '<p>In my SWT Java app I often want to return information from inside a Display.syncExec() call. The best way I\'ve found so far to do this is:</p>\r\n<pre class=\"lang-java s-code-block\"><code class=\"hljs language-java\"><span class=\"hljs-keyword\">final</span> ArrayList&lt;Integer&gt; result = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;Integer&gt;();\r\nGUI.display().syncExec(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Runnable</span>(){ <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">run</span><span class=\"hljs-params\">()</span> {\r\n   <span class=\"hljs-type\">MessageBox</span> <span class=\"hljs-variable\">mb</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-comment\">/* ... */</span>;\r\n    <span class=\"hljs-comment\">/* set up messagebox */</span>\r\n   result.add(mb.open());\r\n}});\r\n<span class=\"hljs-keyword\">if</span> (SWT.OK == result.get(<span class=\"hljs-number\">0</span>)) { <span class=\"hljs-comment\">/* ... */</span> }\r\n</code></pre>\r\n<p>I think this is allowed because ArrayList is thread-safe, but is there a better container I should be using, or an easier way altogether?</p>', 'Whats-the-best-way-to-return-variables-from-a-syncExec', 29, '2022-04-27 09:02:47'),
(130, 'Find minimal necessary java classpath', '<p>Is there a tool to detect unneeded jar-files?</p>\r\n<p>For instance say that I have myapp.jar, which I can launch with a classpath containing hibernate.jar, junit.jar and easymock.jar. But actually it will work fine using only hibernate.jar, since the code that calls junit.jar is not reachable.</p>\r\n<p>I realize that reflection might complicate things, but I could live with a tool that ignored reflection. Except for that it seems like a relatively simple problem to solve.</p>\r\n<p>If there is no such tool, what is best practices for deciding which dependencies are needed? It seems to me that it must be a common problem.</p>', 'Find-minimal-necessary-java-classpath', 28, '2022-04-27 09:03:37'),
(131, 'Java 1.6 JDK tool, VisualVM', '<p>Has anyone used the new Java 1.6 JDK tool,&nbsp;<a href=\"http://web.archive.org/web/20070724060100/https://visualvm.dev.java.net/\" rel=\"nofollow noreferrer\">VisualVM</a>, to profile a production application and how does the application perform while being profiled?</p>\r\n<p>The documentation say that it is designed for both Production and Development use, but based on previous profiling experience, with other profiling tools, I am hesitant.</p>', 'Java-16-JDK-tool-VisualVM', 28, '2022-04-27 09:04:25'),
(132, 'HQL querying columns in a set', '<p>Is it possible to reach the individual columns of table2 using HQL with a configuration like this?</p>\r\n<pre class=\"lang-java s-code-block\"><code class=\"hljs language-java\">&lt;hibernate-mapping&gt;\r\n  &lt;<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">table</span>=<span class=\"hljs-string\">\"table1\"</span>&gt;\r\n    &lt;set name=<span class=\"hljs-string\">\"table2\"</span> table=<span class=\"hljs-string\">\"table2\"</span> lazy=<span class=\"hljs-string\">\"true\"</span> cascade=<span class=\"hljs-string\">\"all\"</span>&gt;\r\n      &lt;key column=<span class=\"hljs-string\">\"result_id\"</span>/&gt;\r\n      &lt;many-to-many column=<span class=\"hljs-string\">\"group_id\"</span>/&gt;\r\n    &lt;/set&gt;\r\n  &lt;/class&gt;\r\n&lt;/hibernate-mapping&gt;</code></pre>', 'HQL-querying-columns-in-a-set', 28, '2022-04-27 09:05:32'),
(133, 'Create instance of generic type in Java?', '<p>Is it possible to create an instance of a generic type in Java? I\'m thinking based on what I\'ve seen that the answer is&nbsp;<code>no</code>&nbsp;(<em>due to type erasure</em>), but I\'d be interested if anyone can see something I\'m missing:</p>\r\n<pre class=\"lang-java s-code-block\"><code class=\"hljs language-java\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">SomeContainer</span>&lt;E&gt;\r\n{\r\n    E <span class=\"hljs-title function_\">createContents</span><span class=\"hljs-params\">()</span>\r\n    {\r\n        <span class=\"hljs-keyword\">return</span> what???\r\n    }\r\n}\r\n</code></pre>\r\n<p>EDIT: It turns out that&nbsp;<a href=\"http://www.artima.com/weblogs/viewpost.jsp?thread=208860\" rel=\"noreferrer\">Super Type Tokens</a>&nbsp;could be used to resolve my issue, but it requires a lot of reflection-based code, as some of the answers below have indicated.</p>\r\n<p>I\'ll leave this open for a little while to see if anyone comes up with anything dramatically different than Ian Robertson\'s&nbsp;<a href=\"http://www.artima.com/weblogs/viewpost.jsp?thread=208860\" rel=\"noreferrer\">Artima Article</a>.</p>', 'Create-instance-of-generic-type-in-Java', 28, '2022-04-27 09:06:17'),
(134, 'Is there a working on-the-fly compilation in NetBeans 6.5 and how well is it doing?', '<p>I learned today that NetBeans 6.5 should have an on-the-fly compilation of (single) Java files. This feature is well known from Eclipse: Simply store the file and the compiled class is stored, too. Is NetBeans working the same way? If not, how is it ticking?</p>', 'Is-there-a-working-on-the-fly-compilation-in-NetBeans-65-and-how-well-is-it-doing', 28, '2022-04-27 09:07:37'),
(135, 'How do I check CPU and Memory Usage in Java?', '<p>I need to check CPU and memory usage for the server in java, anyone know how it could be done?</p>', 'How-do-I-check-CPU-and-Memory-Usage-in-Java', 28, '2022-04-27 09:10:48'),
(136, 'Date.getTime() not including time?', '<p>Can\'t understand why the following takes place:</p>\r\n<pre class=\"lang-java s-code-block\"><code class=\"hljs language-java\"><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">date</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">\"06-04-2007 07:05\"</span>;\r\n<span class=\"hljs-type\">SimpleDateFormat</span> <span class=\"hljs-variable\">fmt</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SimpleDateFormat</span>(<span class=\"hljs-string\">\"MM-dd-yyyy HH:mm\"</span>);\r\n<span class=\"hljs-type\">Date</span> <span class=\"hljs-variable\">myDate</span> <span class=\"hljs-operator\">=</span> fmt.parse(date); \r\n\r\nSystem.out.println(myDate);  <span class=\"hljs-comment\">//Mon Jun 04 07:05:00 EDT 2007</span>\r\n<span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">timestamp</span> <span class=\"hljs-operator\">=</span> myDate.getTime();\r\nSystem.out.println(timestamp); <span class=\"hljs-comment\">//1180955100000 -- where are the milliseconds?</span>\r\n\r\n<span class=\"hljs-comment\">// on the other hand...</span>\r\n\r\nmyDate = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>();\r\nSystem.out.println(myDate);  <span class=\"hljs-comment\">//Tue Sep 16 13:02:44 EDT 2008</span>\r\ntimestamp = myDate.getTime();\r\nSystem.out.println(timestamp); <span class=\"hljs-comment\">//1221584564703 -- why, oh, why?</span></code></pre>', 'DategetTime-not-including-time', 28, '2022-04-27 09:11:41');

-- --------------------------------------------------------

--
-- Table structure for table `forumreply`
--

CREATE TABLE `forumreply` (
  `id` int(11) NOT NULL,
  `forum_reply` text NOT NULL,
  `post_id` int(11) NOT NULL,
  `user_id` int(11) NOT NULL,
  `created_at` timestamp NOT NULL DEFAULT current_timestamp()
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

--
-- Dumping data for table `forumreply`
--

INSERT INTO `forumreply` (`id`, `forum_reply`, `post_id`, `user_id`, `created_at`) VALUES
(106, '<pre class=\"language-php\"><code>$this-&gt;db-&gt;select(\'name\'); \r\n    $this-&gt;db-&gt;from(\'tblNAME\');   \r\n    $this-&gt;db-&gt;where(\'res_id\', $res_id);\r\n    return $this-&gt;db-&gt;get()-&gt;result();</code></pre>\r\n<p>It is quicker and more efficient I suppose as you are not returning everything.</p>\r\n<p>UNTESTED</p>\r\n<p>Here is a tested function I use which you might find good reeference</p>\r\n<pre class=\"language-php\"><code>function get($id = null) \r\n        {\r\n            $this-&gt;db-&gt;select(\'id, Username, First_Name, Last_Name, Role, Email\');\r\n            $this-&gt;db-&gt;from(\'user\');\r\n            if (!is_null($id)) $this-&gt;db-&gt;where(\'id\', $id);\r\n            $this-&gt;db-&gt;order_by(\'id\', \'desc\');\r\n            return $this-&gt;db-&gt;get()-&gt;result();\r\n        }</code></pre>', 116, 28, '2022-04-26 23:44:57'),
(107, '<p>Here are some simple techniques for vertical-align:</p>\r\n<h2>One-line vertical-align:middle</h2>\r\n<p>This one is easy: set the line-height of the text element to equal that of the container</p>\r\n<pre class=\"language-markup\"><code>&lt;div&gt;\r\n  &lt;img style=\"width:30px; height:30px;\"&gt;\r\n  &lt;span style=\"line-height:30px;\"&gt;Doesn\'t work.&lt;/span&gt;\r\n&lt;/div&gt;</code></pre>\r\n<h2>Multiple-lines vertical-align:bottom</h2>\r\n<p>Absolutely position an inner div relative to its container</p>\r\n<pre class=\"language-markup\"><code>&lt;div style=\"position:relative;width:30px;height:60px;\"&gt;\r\n  &lt;div style=\"position:absolute;bottom:0\"&gt;This is positioned on the bottom&lt;/div&gt;\r\n&lt;/div&gt;</code></pre>\r\n<h2>Multiple-lines vertical-align:middle</h2>\r\n<pre class=\"language-markup\"><code>&lt;div style=\"display:table;width:30px;height:60px;\"&gt;\r\n  &lt;div style=\"display:table-cell;height:30px;\"&gt;This is positioned in the middle&lt;/div&gt;\r\n&lt;/div&gt;</code></pre>\r\n<h2>If you must support ancient versions of IE &lt;= 7</h2>\r\n<p>In order to get this to work correctly across the board, you\'ll have to hack the CSS a bit. Luckily, there is an IE bug that works in our favor. Setting&nbsp;<code>top:50%</code>&nbsp;on the container and&nbsp;<code>top:-50%</code>&nbsp;on the inner div, you can achieve the same result. We can combine the two using another feature IE doesn\'t support: advanced CSS selectors.</p>\r\n<pre class=\"language-markup\"><code>&lt;style type=\"text/css\"&gt;\r\n  #container {\r\n    width: 30px;\r\n    height: 60px;\r\n    position: relative;\r\n  }\r\n  #wrapper &gt; #container {\r\n    display: table;\r\n    position: static;\r\n  }\r\n  #container div {\r\n    position: absolute;\r\n    top: 50%;\r\n  }\r\n  #container div div {\r\n    position: relative;\r\n    top: -50%;\r\n  }\r\n  #container &gt; div {\r\n    display: table-cell;\r\n    vertical-align: middle;\r\n    position: static;\r\n  }\r\n&lt;/style&gt;\r\n\r\n&lt;div id=\"wrapper\"&gt;\r\n  &lt;div id=\"container\"&gt;\r\n    &lt;div&gt;&lt;div&gt;&lt;p&gt;Works in everything!&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;\r\n  &lt;/div&gt;\r\n&lt;/div&gt;</code></pre>\r\n<h2>Variable container height vertical-align:middle</h2>\r\n<p>This solution requires a slightly more modern browser than the other solutions, as it makes use of the&nbsp;<code>transform: translateY</code>&nbsp;property. (<a href=\"http://caniuse.com/#feat=transforms2d\" rel=\"noreferrer\">http://caniuse.com/#feat=transforms2d</a>)</p>\r\n<p>Applying the following 3 lines of CSS to an element will vertically centre it within its parent regardless of the height of the parent element:</p>\r\n<pre class=\"language-css\"><code>position: relative;\r\ntop: 50%;\r\ntransform: translateY(-50%);</code></pre>', 116, 28, '2022-04-27 00:08:48'),
(108, '<p>You can create query like below:</p>\r\n<pre class=\"language-markup\"><code>SearchRequest searchRequest = new SearchRequest(\"userdoc\");\r\nSearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();\r\nBoolQueryBuilder queryBuilder = QueryBuilders.boolQuery()\r\n                .mustNot(QueryBuilders.nestedQuery(\"myField\", QueryBuilders.existsQuery(\"myField.id\"),ScoreMode.None));\r\nsearchSourceBuilder.query(queryBuilder);\r\nsearchRequest.source(searchSourceBuilder);\r\nSearchResponse searchResponse = client.search(searchRequest, RequestOptions.DEFAULT);</code></pre>', 119, 28, '2022-04-27 00:21:28'),
(111, '<p>One way you could do this is:</p>\r\n<pre class=\"language-markup\"><code>public class FactoryInitialisingServletContextListener implements ServletContextListener {\r\n\r\n    public void contextDestroyed(ServletContextEvent event) {\r\n    }\r\n\r\n    public void contextInitialized(ServletContextEvent event) {\r\n        Properties properties = new Properties();\r\n        ServletContext servletContext = event.getServletContext();\r\n        Enumeration&lt;?&gt; keys = servletContext.getInitParameterNames();\r\n        while (keys.hasMoreElements()) {\r\n            String key = (String) keys.nextElement();\r\n            String value = servletContext.getInitParameter(key);\r\n            properties.setProperty(key, value);\r\n        }\r\n        Factory.setServletContextProperties(properties);\r\n    }\r\n}\r\n\r\npublic class Factory {\r\n\r\n    static Properties _servletContextProperties = new Properties();\r\n\r\n    public static void setServletContextProperties(Properties servletContextProperties) {\r\n        _servletContextProperties = servletContextProperties;\r\n    }\r\n}</code></pre>\r\n<p>And then have the following in your web.xml</p>\r\n<pre class=\"language-markup\"><code>&lt;listener&gt;\r\n    &lt;listener-class&gt;com.acme.FactoryInitialisingServletContextListener&lt;listener-class&gt;\r\n&lt;/listener&gt;</code></pre>\r\n<p>If your application is running in a web container, then the listener will be invoked by the container once the context has been created. In which case, the _servletContextProperties will be replaced with any context-params specified in the web.xml.</p>\r\n<p>If your application is running outside a web container, then _servletContextProperties will be empty.</p>', 120, 28, '2022-04-27 00:42:33'),
(112, '<p>Have you considered using the Spring framework for this? That way, your beans don\'t get any extra cruft, and spring handles the configuration setup for you.</p>', 120, 29, '2022-04-27 00:43:09'),
(113, '<p>I think that you will have to add an associated bootstrap class which takes a reference to a ServletConfig (or ServletContext) and transcribes those values to the Factory class. At least this way you can package it separately.</p>\r\n<p>@toolkit : Excellent, most humbled - This is something that I have been trying to do for a while</p>', 120, 29, '2022-04-27 00:43:18'),
(114, '<p>I usually have</p>\r\n<pre class=\"language-markup\"><code>Project Directory\r\n  src - actual source\r\n  doc - documentation\r\n  lib - libraries referenced from source\r\n  dep - installation files for dependencies that don\'t fit in lib\r\n  db  - database installation script</code></pre>\r\n<p>In work with Visual Studio, I\'m not sure if this works the same in the java world. But i usually put stuff in different project folders in src. For each source project there\'s a separate test project. Build files go in the main project directory. I usually put a README there too documenting how to setup the project if it needs more than just checking out.</p>\r\n<p>EDIT: This is the structure for a single working checkout of the project. It will be duplicated for each branch/tag in your revision control system (remember, in most SVN system, copies are cheap). The above example under Subversion would look like:</p>\r\n<pre class=\"language-markup\"><code>/project\r\n    /trunk\r\n        /src\r\n        /doc\r\n        /...\r\n    /branches\r\n        /feature1\r\n            /src\r\n            /doc\r\n            /...\r\n        /feature2\r\n            /src\r\n            /doc\r\n            /...</code></pre>', 121, 29, '2022-04-27 00:44:23'),
(115, '<p>I found some old questions here on SO that might be interesting for you:</p>\r\n<ul>\r\n<li><a href=\"https://stackoverflow.com/questions/5214/whats-a-good-standard-code-layout-for-a-php-application\">Whats a good standard code layout for a php application</a>\r\n<ul>\r\n<li>Contains a link to an article on&nbsp;<a href=\"http://phpimpact.wordpress.com/2008/08/11/scalable-and-flexible-directory-structure-for-web-applications/\" rel=\"nofollow noreferrer\">Scalable and Flexible Directory Structure for Web Applications</a>&nbsp;(focus on PHP, though)</li>\r\n</ul>\r\n</li>\r\n<li><a href=\"https://stackoverflow.com/questions/7596/how-to-structure-a-java-application-in-other-words-where-do-i-put-my-classes\">How to structure a java application, in other words: where do I put my classes?</a></li>\r\n<li><a href=\"https://stackoverflow.com/questions/16829/structure-of-projects-in-version-control\">Structure of Projects in Version Control</a></li>\r\n</ul>', 121, 29, '2022-04-27 00:44:32'),
(116, '<p>To expand on what Mendelt Siebenga suggested, I would also add a&nbsp;<code>web</code>&nbsp;directory (for JSP files, WEB-INF, web.xml, etc).</p>\r\n<p>Tests should go in a folder named&nbsp;<code>test</code>&nbsp;that is a sibling of the main&nbsp;<code>src</code>&nbsp;folder - this way your unit test classes can have the same package name as the source code being tested (to ease with situations where you want to test protected methods or classes, for example... see the&nbsp;<a href=\"http://junit.sourceforge.net/doc/faq/faq.htm#tests_10\" rel=\"nofollow noreferrer\">JUnit FAQ for this</a>, and this question also on&nbsp;<a href=\"http://junit.sourceforge.net/doc/faq/faq.htm#organize_1\" rel=\"nofollow noreferrer\">Where should I put my test files?</a>).</p>\r\n<p>I haven\'t had much use for it myself, but a Maven project will also create a&nbsp;<code>resources</code>&nbsp;folder alongside the src folder for non-source code that you want to package/deploy along with the main source code - things such as properties files, resources bundles, etc. Your mileage may vary on this one.</p>', 121, 29, '2022-04-27 00:44:41'),
(117, '<p>I use Eclipse for creating J2EE web applications and this will create the following project structure:</p>\r\n<pre class=\"language-markup\"><code>WebAppName\\\r\n    \\lib\r\n    \\src\r\n    \\tests\r\n    etc...</code></pre>\r\n<p>I would then create an SVN folder on our trunk called WebAppNameProject. Within this folder I would create folders called WebAppNameSource, Documentation etc. Within the WebAppNameSource folder I would place the project source generated by Eclipse. Thus I would have the following folder structure in SVN:</p>\r\n<pre class=\"language-markup\"><code>\\svn\\trunk\\WebAppNameProject\r\n    \\WebAppNameSource\r\n        \\lib\r\n        \\src\r\n        \\tests\r\n        etc...\r\n    \\Documentation </code></pre>\r\n<p>Hope this helps.</p>', 121, 29, '2022-04-27 00:45:19'),
(118, '<p>I found your question while searching for information with&nbsp;<a href=\"http://www.sqlite.org/\" rel=\"noreferrer\">SQLite</a>&nbsp;and Java. Just thought I\'d add my answer which I also posted on my&nbsp;<a href=\"http://blog.rungeek.com/post/81611917/how-to-use-sqlite-with-java\" rel=\"noreferrer\">blog</a>.</p>\r\n<p>I have been coding in Java for a while now. I have also known about SQLite but never used it&hellip; Well I have used it through other&nbsp;<a href=\"http://www.sqlite.org/famous.html\" rel=\"noreferrer\">applications</a>&nbsp;but never in an app that I coded. So I needed it for a project this week and it\'s so simple use!</p>\r\n<p>I found a Java JDBC driver for SQLite. Just add the&nbsp;<a href=\"https://github.com/xerial/sqlite-jdbc\" rel=\"noreferrer\">JAR file</a>&nbsp;to your classpath and import java.sql.*</p>\r\n<p>His test app will create a database file, send some SQL commands to create a table, store some data in the table, and read it back and display on console. It will create the&nbsp;<strong>test.db</strong>&nbsp;file in the root directory of the project. You can run this example with&nbsp;<code>java -cp .:sqlitejdbc-v056.jar Test</code>.</p>\r\n<pre class=\"language-markup\"><code>package com.rungeek.sqlite;\r\n\r\nimport java.sql.Connection;\r\nimport java.sql.DriverManager;\r\nimport java.sql.PreparedStatement;\r\nimport java.sql.ResultSet;\r\nimport java.sql.Statement;\r\n\r\npublic class Test {\r\n    public static void main(String[] args) throws Exception {\r\n        Class.forName(\"org.sqlite.JDBC\");\r\n        Connection conn = DriverManager.getConnection(\"jdbc:sqlite:test.db\");\r\n        Statement stat = conn.createStatement();\r\n        stat.executeUpdate(\"drop table if exists people;\");\r\n        stat.executeUpdate(\"create table people (name, occupation);\");\r\n        PreparedStatement prep = conn.prepareStatement(\r\n            \"insert into people values (?, ?);\");\r\n\r\n        prep.setString(1, \"Gandhi\");\r\n        prep.setString(2, \"politics\");\r\n        prep.addBatch();\r\n        prep.setString(1, \"Turing\");\r\n        prep.setString(2, \"computers\");\r\n        prep.addBatch();\r\n        prep.setString(1, \"Wittgenstein\");\r\n        prep.setString(2, \"smartypants\");\r\n        prep.addBatch();\r\n\r\n        conn.setAutoCommit(false);\r\n        prep.executeBatch();\r\n        conn.setAutoCommit(true);\r\n\r\n        ResultSet rs = stat.executeQuery(\"select * from people;\");\r\n        while (rs.next()) {\r\n            System.out.println(\"name = \" + rs.getString(\"name\"));\r\n            System.out.println(\"job = \" + rs.getString(\"occupation\"));\r\n        }\r\n        rs.close();\r\n        conn.close();\r\n    }\r\n  }</code></pre>', 122, 29, '2022-04-27 00:46:17'),
(120, '<p>David Crawshaw project(sqlitejdbc-v056.jar) seems out of date and last update was Jun 20, 2009,&nbsp;<a href=\"https://github.com/crawshaw/sqlitejdbc\" rel=\"nofollow noreferrer\">source here</a></p>\r\n<p>I would recomend&nbsp;<a href=\"http://www.xerial.org/trac/Xerial/wiki/SQLiteJDBC\" rel=\"nofollow noreferrer\">Xerials fork</a>&nbsp;of Crawshaw sqlite wrapper. I replaced sqlitejdbc-v056.jar with Xerials sqlite-jdbc-3.7.2.jar file without any problem.</p>\r\n<p>Uses same syntax as in&nbsp;<a href=\"https://stackoverflow.com/a/593137/63678\">Bernie\'s answer</a>&nbsp;and is much faster and with latest sqlite library.</p>\r\n<p><strong>What is different from Zentus\'s SQLite JDBC?</strong></p>\r\n<blockquote>\r\n<p>The original Zentus\'s SQLite JDBC driver&nbsp;<a href=\"http://www.zentus.com/sqlitejdbc/\" rel=\"nofollow noreferrer\">http://www.zentus.com/sqlitejdbc/</a>&nbsp;itself is an excellent utility for using SQLite databases from Java language, and our SQLiteJDBC library also relies on its implementation. However, its pure-java version, which totally translates c/c++ codes of SQLite into Java, is significantly slower compared to its native version, which uses SQLite binaries compiled for each OS (win, mac, linux).</p>\r\n<p>To use the native version of sqlite-jdbc, user had to set a path to the native codes (dll, jnilib, so files, which are JNDI C programs) by using command-line arguments, e.g., -Djava.library.path=(path to the dll, jnilib, etc.), or -Dorg.sqlite.lib.path, etc. This process was error-prone and bothersome to tell every user to set these variables. Our SQLiteJDBC library completely does away these inconveniences.</p>\r\n<p>Another difference is that we are keeping this SQLiteJDBC libray up-to-date to the newest version of SQLite engine, because we are one of the hottest users of this library. For example, SQLite JDBC is a core component of UTGB (University of Tokyo Genome Browser) Toolkit, which is our utility to create personalized genome browsers.</p>\r\n</blockquote>\r\n<p><strong>EDIT</strong>&nbsp;: As usual when you update something, there will be problems in some obscure place in your code(happened to me). Test test test =)</p>', 122, 29, '2022-04-27 00:48:52'),
(121, '<p>The&nbsp;<a href=\"http://www.sqlite.org/cvstrac/wiki?p=SqliteWrappers\" rel=\"noreferrer\">wiki</a>&nbsp;lists some more wrappers:</p>\r\n<ul>\r\n<li>Java wrapper (around a SWIG interface):&nbsp;<a href=\"http://tk-software.home.comcast.net/\" rel=\"noreferrer\">http://tk-software.home.comcast.net/</a></li>\r\n<li>A good tutorial to use JDBC driver for SQLite. (it works at least !)&nbsp;<a href=\"http://www.ci.uchicago.edu/wiki/bin/view/VDS/VDSDevelopment/UsingSQLite\" rel=\"noreferrer\">http://www.ci.uchicago.edu/wiki/bin/view/VDS/VDSDevelopment/UsingSQLite</a></li>\r\n<li>Cross-platform JDBC driver which uses embedded native SQLite libraries on Windows, Linux, OS X, and falls back to pure Java implementation on other OSes:&nbsp;<a href=\"https://github.com/xerial/sqlite-jdbc\" rel=\"noreferrer\">https://github.com/xerial/sqlite-jdbc</a>&nbsp;(formerly&nbsp;<a href=\"http://www.zentus.com/sqlitejdbc\" rel=\"noreferrer\">zentus</a>)</li>\r\n<li>Another Java - SWIG wrapper. It only works on Win32.&nbsp;<a href=\"http://rodolfo_3.tripod.com/index.html\" rel=\"noreferrer\">http://rodolfo_3.tripod.com/index.html</a></li>\r\n<li>sqlite-java-shell: 100% pure Java port of the sqlite3 commandline shell built with NestedVM. (This is not a JDBC driver).</li>\r\n<li>SQLite JDBC Driver for Mysaifu JVM: SQLite JDBC Driver for Mysaifu JVM and SQLite JNI Library for Windows (x86) and Linux (i386/PowerPC).</li>\r\n</ul>', 122, 29, '2022-04-27 00:52:23'),
(123, '<p>Java is always&nbsp;<strong>pass-by-value</strong>. Unfortunately, when we deal with objects we are really dealing with object-handles called&nbsp;<em>references</em>&nbsp;which are passed-by-value as well. This terminology and semantics easily confuse many beginners.</p>\r\n<p>It goes like this:</p>\r\n<pre class=\"lang-java s-code-block\"><code class=\"hljs language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\r\n    <span class=\"hljs-type\">Dog</span> <span class=\"hljs-variable\">aDog</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Dog</span>(<span class=\"hljs-string\">\"Max\"</span>);\r\n    <span class=\"hljs-type\">Dog</span> <span class=\"hljs-variable\">oldDog</span> <span class=\"hljs-operator\">=</span> aDog;\r\n\r\n    <span class=\"hljs-comment\">// we pass the object to foo</span>\r\n    foo(aDog);\r\n    <span class=\"hljs-comment\">// aDog variable is still pointing to the \"Max\" dog when foo(...) returns</span>\r\n    aDog.getName().equals(<span class=\"hljs-string\">\"Max\"</span>); <span class=\"hljs-comment\">// true</span>\r\n    aDog.getName().equals(<span class=\"hljs-string\">\"Fifi\"</span>); <span class=\"hljs-comment\">// false</span>\r\n    aDog == oldDog; <span class=\"hljs-comment\">// true</span>\r\n}\r\n\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">foo</span><span class=\"hljs-params\">(Dog d)</span> {\r\n    d.getName().equals(<span class=\"hljs-string\">\"Max\"</span>); <span class=\"hljs-comment\">// true</span>\r\n    <span class=\"hljs-comment\">// change d inside of foo() to point to a new Dog instance \"Fifi\"</span>\r\n    d = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Dog</span>(<span class=\"hljs-string\">\"Fifi\"</span>);\r\n    d.getName().equals(<span class=\"hljs-string\">\"Fifi\"</span>); <span class=\"hljs-comment\">// true</span>\r\n}\r\n</code></pre>\r\n<p>In the example above&nbsp;<code>aDog.getName()</code>&nbsp;will still return&nbsp;<code>\"Max\"</code>. The value&nbsp;<code>aDog</code>&nbsp;within&nbsp;<code>main</code>&nbsp;is not changed in the function&nbsp;<code>foo</code>&nbsp;with the&nbsp;<code>Dog</code>&nbsp;<code>\"Fifi\"</code>&nbsp;as the object reference is passed by value. If it were passed by reference, then the&nbsp;<code>aDog.getName()</code>&nbsp;in&nbsp;<code>main</code>&nbsp;would return&nbsp;<code>\"Fifi\"</code>&nbsp;after the call to&nbsp;<code>foo</code>.</p>\r\n<p>Likewise:</p>\r\n<pre class=\"lang-java s-code-block\"><code class=\"hljs language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\r\n    <span class=\"hljs-type\">Dog</span> <span class=\"hljs-variable\">aDog</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Dog</span>(<span class=\"hljs-string\">\"Max\"</span>);\r\n    <span class=\"hljs-type\">Dog</span> <span class=\"hljs-variable\">oldDog</span> <span class=\"hljs-operator\">=</span> aDog;\r\n\r\n    foo(aDog);\r\n    <span class=\"hljs-comment\">// when foo(...) returns, the name of the dog has been changed to \"Fifi\"</span>\r\n    aDog.getName().equals(<span class=\"hljs-string\">\"Fifi\"</span>); <span class=\"hljs-comment\">// true</span>\r\n    <span class=\"hljs-comment\">// but it is still the same dog:</span>\r\n    aDog == oldDog; <span class=\"hljs-comment\">// true</span>\r\n}\r\n\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">foo</span><span class=\"hljs-params\">(Dog d)</span> {\r\n    d.getName().equals(<span class=\"hljs-string\">\"Max\"</span>); <span class=\"hljs-comment\">// true</span>\r\n    <span class=\"hljs-comment\">// this changes the name of d to be \"Fifi\"</span>\r\n    d.setName(<span class=\"hljs-string\">\"Fifi\"</span>);\r\n}\r\n</code></pre>\r\n<p>In the above example,&nbsp;<code>Fifi</code>&nbsp;is the dog\'s name after call to&nbsp;<code>foo(aDog)</code>&nbsp;because the object\'s name was set inside of&nbsp;<code>foo(...)</code>. Any operations that&nbsp;<code>foo</code>&nbsp;performs on&nbsp;<code>d</code>&nbsp;are such that, for all practical purposes, they are performed on&nbsp;<code>aDog</code>, but it is&nbsp;<strong>not</strong>&nbsp;possible to change the value of the variable&nbsp;<code>aDog</code>&nbsp;itself.</p>\r\n<p>For more information on pass by reference and pass by value, consult the following SO answer:&nbsp;<a href=\"https://stackoverflow.com/a/430958/6005228\">https://stackoverflow.com/a/430958/6005228</a>. This explains more thoroughly the semantics and history behind the two and also explains why Java and many other modern languages appear to do both in certain cases.</p>', 123, 28, '2022-04-27 00:53:53'),
(124, '<p>I just noticed you referenced&nbsp;<a href=\"http://javadude.com/articles/passbyvalue.htm\" rel=\"noreferrer\">my article</a>.</p>\r\n<p>The Java Spec says that everything in Java is pass-by-value. There is no such thing as \"pass-by-reference\" in Java.</p>\r\n<p>The key to understanding this is that something like</p>\r\n<pre class=\"lang-java s-code-block\"><code class=\"hljs language-java\">Dog myDog;\r\n</code></pre>\r\n<p>is&nbsp;<em>not</em>&nbsp;a Dog; it\'s actually a&nbsp;<em>pointer</em>&nbsp;to a Dog. The use of the term \"reference\" in Java is very misleading and is what causes most of the confusion here. What they call \"references\" act/feel more like what we\'d call \"pointers\" in most other languages.</p>\r\n<p>What that means, is when you have</p>\r\n<pre class=\"lang-java s-code-block\"><code class=\"hljs language-java\"><span class=\"hljs-type\">Dog</span> <span class=\"hljs-variable\">myDog</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Dog</span>(<span class=\"hljs-string\">\"Rover\"</span>);\r\nfoo(myDog);\r\n</code></pre>\r\n<p>you\'re essentially passing the&nbsp;<em>address</em>&nbsp;of the created&nbsp;<code>Dog</code>&nbsp;object to the&nbsp;<code>foo</code>&nbsp;method.</p>\r\n<p>(I say essentially because Java pointers/references aren\'t direct addresses, but it\'s easiest to think of them that way.)</p>\r\n<p>Suppose the&nbsp;<code>Dog</code>&nbsp;object resides at memory address 42. This means we pass 42 to the method.</p>\r\n<p>if the Method were defined as</p>\r\n<pre class=\"lang-java s-code-block\"><code class=\"hljs language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">foo</span><span class=\"hljs-params\">(Dog someDog)</span> {\r\n    someDog.setName(<span class=\"hljs-string\">\"Max\"</span>);     <span class=\"hljs-comment\">// AAA</span>\r\n    someDog = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Dog</span>(<span class=\"hljs-string\">\"Fifi\"</span>);  <span class=\"hljs-comment\">// BBB</span>\r\n    someDog.setName(<span class=\"hljs-string\">\"Rowlf\"</span>);   <span class=\"hljs-comment\">// CCC</span>\r\n}\r\n</code></pre>\r\n<p>let\'s look at what\'s happening.</p>\r\n<ul>\r\n<li>the parameter&nbsp;<code>someDog</code>&nbsp;is set to the value 42</li>\r\n<li>at line \"AAA\"\r\n<ul>\r\n<li><code>someDog</code>&nbsp;is followed to the&nbsp;<code>Dog</code>&nbsp;it points to (the&nbsp;<code>Dog</code>&nbsp;object at address 42)</li>\r\n<li>that&nbsp;<code>Dog</code>&nbsp;(the one at address 42) is asked to change his name to Max</li>\r\n</ul>\r\n</li>\r\n<li>at line \"BBB\"\r\n<ul>\r\n<li>a new&nbsp;<code>Dog</code>&nbsp;is created. Let\'s say he\'s at address 74</li>\r\n<li>we assign the parameter&nbsp;<code>someDog</code>&nbsp;to 74</li>\r\n</ul>\r\n</li>\r\n<li>at line \"CCC\"\r\n<ul>\r\n<li>someDog is followed to the&nbsp;<code>Dog</code>&nbsp;it points to (the&nbsp;<code>Dog</code>&nbsp;object at address 74)</li>\r\n<li>that&nbsp;<code>Dog</code>&nbsp;(the one at address 74) is asked to change his name to Rowlf</li>\r\n</ul>\r\n</li>\r\n<li>then, we return</li>\r\n</ul>\r\n<p>Now let\'s think about what happens outside the method:</p>\r\n<p><em>Did&nbsp;<code>myDog</code>&nbsp;change?</em></p>\r\n<p>There\'s the key.</p>\r\n<p>Keeping in mind that&nbsp;<code>myDog</code>&nbsp;is a&nbsp;<em>pointer</em>, and not an actual&nbsp;<code>Dog</code>, the answer is NO.&nbsp;<code>myDog</code>&nbsp;still has the value 42; it\'s still pointing to the original&nbsp;<code>Dog</code>&nbsp;(but note that because of line \"AAA\", its name is now \"Max\" - still the same Dog;&nbsp;<code>myDog</code>\'s value has not changed.)</p>\r\n<p>It\'s perfectly valid to&nbsp;<em>follow</em>&nbsp;an address and change what\'s at the end of it; that does not change the variable, however.</p>\r\n<p>Java works exactly like C. You can assign a pointer, pass the pointer to a method, follow the pointer in the method and change the data that was pointed to. However, the caller will not see any changes you make to where that pointer points. (In a language with pass-by-reference semantics, the method function&nbsp;<em>can</em>&nbsp;change the pointer and the caller will see that change.)</p>\r\n<p>In C++, Ada, Pascal and other languages that support pass-by-reference, you can actually change the variable that was passed.</p>\r\n<p>If Java had pass-by-reference semantics, the&nbsp;<code>foo</code>&nbsp;method we defined above would have changed where&nbsp;<code>myDog</code>&nbsp;was pointing when it assigned&nbsp;<code>someDog</code>&nbsp;on line BBB.</p>\r\n<p>Think of reference parameters as being aliases for the variable passed in. When that alias is assigned, so is the variable that was passed in.</p>', 123, 28, '2022-04-27 00:54:06'),
(125, '<p>I use following approach to finding memory leaks in Java. I\'ve used jProfiler with great success, but I believe that any specialized tool with graphing capabilities (diffs are easier to analyze in graphical form) will work.</p>\r\n<ol>\r\n<li>Start the application and wait until it get to \"stable\" state, when all the initialization is complete and the application is idle.</li>\r\n<li>Run the operation suspected of producing a memory leak several times to allow any cache, DB-related initialization to take place.</li>\r\n<li>Run GC and take memory snapshot.</li>\r\n<li>Run the operation again. Depending on the complexity of operation and sizes of data that is processed operation may need to be run several to many times.</li>\r\n<li>Run GC and take memory snapshot.</li>\r\n<li>Run a diff for 2 snapshots and analyze it.</li>\r\n</ol>\r\n<p>Basically analysis should start from greatest positive diff by, say, object types and find what causes those extra objects to stick in memory.</p>\r\n<p>For web applications that process requests in several threads analysis gets more complicated, but nevertheless general approach still applies.</p>\r\n<p>I did quite a number of projects specifically aimed at reducing memory footprint of the applications and this general approach with some application specific tweaks and trick always worked well.</p>', 124, 28, '2022-04-27 00:54:39'),
(126, '<p>Questioner here, I have got to say getting a tool that does not take 5 minutes to answer any click makes it a lot easier to find potential memory leaks.</p>\r\n<p>Since people are suggesting several tools ( I only tried visual wm since I got that in the JDK and JProbe trial ) I though I should suggest a free / open source tool built on the Eclipse platform, the Memory Analyzer (sometimes referenced as the SAP memory analyzer) available on&nbsp;<a href=\"http://www.eclipse.org/mat/\" rel=\"noreferrer\">http://www.eclipse.org/mat/</a>&nbsp;.</p>\r\n<p>What is really cool about this tool is that it indexed the heap dump when I first opened it which allowed it to show data like retained heap without waiting 5 minutes for each object (pretty much all operations were tons faster than the other tools I tried).</p>\r\n<p>When you open the dump, the first screen shows you a pie chart with the biggest objects (counting retained heap) and one can quickly navigate down to the objects that are to big for comfort. It also has a Find likely leak suspects which I reccon can come in handy, but since the navigation was enough for me I did not really get into it.</p>', 124, 28, '2022-04-27 00:54:48'),
(127, '<p>A tool is a big help.</p>\r\n<p>However, there are times when you can\'t use a tool: the heap dump is so huge it crashes the tool, you are trying to troubleshoot a machine in some production environment to which you only have shell access, etc.</p>\r\n<p>In that case, it helps to know your way around the hprof dump file.</p>\r\n<p>Look for SITES BEGIN. This shows you what objects are using the most memory. But the objects aren\'t lumped together solely by type: each entry also includes a \"trace\" ID. You can then search for that \"TRACE nnnn\" to see the top few frames of the stack where the object was allocated. Often, once I see where the object is allocated, I find a bug and I\'m done. Also, note that you can control how many frames are recorded in the stack with the options to -Xrunhprof.</p>\r\n<p>If you check out the allocation site, and don\'t see anything wrong, you have to start backward chaining from some of those live objects to root objects, to find the unexpected reference chain. This is where a tool really helps, but you can do the same thing by hand (well, with grep). There is not just one root object (i.e., object not subject to garbage collection). Threads, classes, and stack frames act as root objects, and anything they reference strongly is not collectible.</p>\r\n<p>To do the chaining, look in the HEAP DUMP section for entries with the bad trace id. This will take you to an OBJ or ARR entry, which shows a unique object identifier in hexadecimal. Search for all occurrences of that id to find who\'s got a strong reference to the object. Follow each of those paths backward as they branch until you figure out where the leak is. See why a tool is so handy?</p>\r\n<p>Static members are a repeat offender for memory leaks. In fact, even without a tool, it\'d be worth spending a few minutes looking through your code for static Map members. Can a map grow large? Does anything ever clean up its entries?</p>', 124, 28, '2022-04-27 00:54:58'),
(128, '<p>Most of the time, in enterprise applications the Java heap given is larger than the ideal size of max 12 to 16 GB. I have found it hard to make the NetBeans profiler work directly on these big java apps.</p>\r\n<p>But usually this is not needed. You can use the jmap utility that comes with the jdk to take a \"live\" heap dump , that is jmap will dump the heap after running GC. Do some operation on the application, wait till the operation is completed, then take another \"live\" heap dump. Use tools like Eclipse MAT to load the heapdumps, sort on the histogram, see which objects have increased, or which are the highest, This would give a clue.</p>\r\n<pre class=\"lang-java s-code-block\"><code class=\"hljs language-java\">su  proceeuser\r\n/bin/jmap -dump:live,format=b,file=/tmp/2930javaheap.hrpof <span class=\"hljs-number\">2930</span>(pid of process)\r\n</code></pre>\r\n<p>There is only one problem with this approach; Huge heap dumps, even with the live option, may be too big to transfer out to development lap, and may need a machine with enough memory/RAM to open.</p>\r\n<p>That is where the class histogram comes into picture. You can dump a live class histogram with the jmap tool. This will give only the class histogram of memory usage.Basically it won\'t have the information to chain the reference. For example it may put char array at the top. And String class somewhere below. You have to draw the connection yourself.</p>\r\n<pre class=\"lang-java s-code-block\"><code class=\"hljs language-java\">jdk/jdk1<span class=\"hljs-number\">.6</span><span class=\"hljs-number\">.0_38</span>/bin/jmap -histo:live <span class=\"hljs-number\">60030</span> &gt; /tmp/60030istolive1330.txt\r\n</code></pre>\r\n<p>Instead of taking two heap dumps, take two class histograms, like as described above; Then compare the class histograms and see the classes that are increasing. See if you can relate the Java classes to your application classes. This will give a pretty good hint. Here is a pythons script that can help you compare two jmap histogram dumps.&nbsp;<a href=\"https://gist.github.com/alexcpn/a68761c94c85f0210413\" rel=\"noreferrer\">histogramparser.py</a></p>\r\n<p>Finally tools like JConolse and VisualVm are essential to see the memory growth over time, and see if there is a memory leak. Finally sometimes your problem may not be a memory leak , but high memory usage.For this enable GC logging;use a more advanced and new compacting GC like G1GC; and you can use jdk tools like jstat to see the GC behaviour live</p>\r\n<pre class=\"lang-java s-code-block\"><code class=\"hljs language-java\">jstat -gccause pid &lt;optional time interval&gt;\r\n</code></pre>\r\n<p>Other referecences to google for -jhat, jmap, Full GC, Humongous allocation, G1GC</p>', 124, 28, '2022-04-27 00:56:27'),
(129, '<p>There are tools that should help you find your leak, like JProbe, YourKit, AD4J or JRockit Mission Control. The last is the one that I personally know best. Any good tool should let you drill down to a level where you can easily identify what leaks, and where the leaking objects are allocated.</p>\r\n<p>Using HashTables, Hashmaps or similar is one of the few ways that you can acually leak memory in Java at all. If I had to find the leak by hand I would peridically print the size of my HashMaps, and from there find the one where I add items and forget to delete them.</p>', 122, 29, '2022-04-27 00:56:52'),
(130, '<p>There are tools that should help you find your leak, like JProbe, YourKit, AD4J or JRockit Mission Control. The last is the one that I personally know best. Any good tool should let you drill down to a level where you can easily identify what leaks, and where the leaking objects are allocated.</p>\r\n<p>Using HashTables, Hashmaps or similar is one of the few ways that you can acually leak memory in Java at all. If I had to find the leak by hand I would peridically print the size of my HashMaps, and from there find the one where I add items and forget to delete them.</p>', 124, 29, '2022-04-27 00:57:15'),
(131, '<p>There is no direct equivalent. GWT is great if you want to do all or most of the client side in java. Also worth checking out is&nbsp;<a href=\"http://directwebremoting.org/\" rel=\"nofollow noreferrer\">DWR</a>, which gives you remote procedure call style access to your server code.</p>', 125, 28, '2022-04-27 00:59:36'),
(132, '<p>Yes, I think&nbsp;<a href=\"http://code.google.com/webtoolkit/\" rel=\"nofollow noreferrer\">Google Web Toolkit</a>&nbsp;is the java equivalent to RJS templates.</p>', 125, 29, '2022-04-27 00:59:49'),
(133, '<p>JNA 3.2.8 has both an implementation for all event logging functions and a Java iterator. Read&nbsp;<a href=\"http://code.dblock.org/ShowPost.aspx?id=125\" rel=\"nofollow\">this</a>.</p>\r\n<pre class=\"lang-java s-code-block\"><code class=\"hljs language-java\"><span class=\"hljs-type\">EventLogIterator</span> <span class=\"hljs-variable\">iter</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">EventLogIterator</span>(<span class=\"hljs-string\">\"Application\"</span>);         \r\n<span class=\"hljs-keyword\">while</span>(iter.hasNext()) { \r\n    <span class=\"hljs-type\">EventLogRecord</span> <span class=\"hljs-variable\">record</span> <span class=\"hljs-operator\">=</span> iter.next(); \r\n    System.out.println(record.getRecordId() \r\n            + <span class=\"hljs-string\">\": Event ID: \"</span> + record.getEventId() \r\n            + <span class=\"hljs-string\">\", Event Type: \"</span> + record.getType() \r\n            + <span class=\"hljs-string\">\", Event Source: \"</span> + record.getSource()); \r\n} </code></pre>', 126, 29, '2022-04-27 01:00:33'),
(134, '<p><a href=\"http://en.wikipedia.org/wiki/Action_Message_Format\" rel=\"nofollow noreferrer\">AMF</a>&nbsp;is a messaging protocol commonly used to talk between flash and a backend system. There\'re several Java implementations, but I haven\'t used any of them so can\'t tell you which is best.</p>\n<ul>\n<li><a href=\"http://labs.adobe.com/technologies/blazeds/\" rel=\"nofollow noreferrer\">Blaze DS</a></li>\n<li><a href=\"http://www.osflash.org/red5\" rel=\"nofollow noreferrer\">Red5</a></li>\n<li><a href=\"http://www.graniteds.org/\" rel=\"nofollow noreferrer\">Granite DS</a></li>\n</ul>\n<p>Flash can also talk plain old XML, SOAP or REST to the backend, so depending on your codebase that might be easier.</p>', 127, 29, '2022-04-27 01:01:14'),
(135, '<p>There is also&nbsp;<strong><a href=\"http://sourceforge.net/projects/openamf/\" rel=\"nofollow noreferrer\">OpenAMF</a></strong>. It is&nbsp;<em>very</em>&nbsp;mature, stable, simple and lightweight relative to Blaze, Red5 and Granite.</p>\r\n<p><strong>BUT</strong>, it is also dated (AMF0 protocol only) and the project is no longer active. Lots of people are still using it out in the wild. And the documentation is borderline non-existent.</p>', 127, 29, '2022-04-27 01:01:25'),
(136, '<p>Granite DS is a good solution, it will allow you to set up services to communicate not only to POJO\'s but to EJB3 session beans also. It comes with a GAS code generator for converting your java beans into as3 equivalents and also data push to the client using the gravity side project.</p>', 127, 29, '2022-04-27 01:01:32'),
(137, '<p>I agree on Granite DS. It was easy to setup and get going.</p>\r\n<p>I have used it to talk directly with a EJB3 bean communicating with thrift generated objects.</p>', 127, 29, '2022-04-27 01:01:40'),
(138, '<p>Try JVM option&nbsp;<strong>-XX:-UsePerfData</strong></p>\r\n<p><a href=\"http://www.oracle.com/technetwork/java/javase/tech/vmoptions-jsp-140102.html\" rel=\"noreferrer\">more info</a></p>\r\n<p>The following might be helpful that is from link&nbsp;<a href=\"https://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html\" rel=\"noreferrer\">https://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html</a></p>\r\n<pre class=\"lang-java s-code-block\"><code class=\"hljs language-java\">-XX:+UsePerfData\r\n\r\n    Enables the perfdata feature. This option is enabled by <span class=\"hljs-keyword\">default</span>\r\n    to allow JVM monitoring and performance testing. Disabling it \r\n    suppresses the creation of the hsperfdata_userid directories. \r\n    To disable the perfdata feature, specify -XX:-UsePerfData.</code></pre>', 128, 29, '2022-04-27 01:02:19'),
(139, '<p>Use the JVM option&nbsp;<strong><code>-XX:-UsePerfData</code></strong>.</p>\r\n<p>This will not have a negative effect on performance, as some other answers say.</p>\r\n<p>By default jvmstat instrumentation is turned on in the HotSpot JVM. The JVM option&nbsp;<code>-XX:-UsePerfData</code>&nbsp;turns it off. If anything, I would speculate, turning off the instrumentation would improve performance (a trivial amount).</p>\r\n<p>So the downside of turning off jvmstat instrumentation is that you lose the performance monitoring information.</p>\r\n<p>jvmstat is described here&nbsp;<a href=\"http://java.sun.com/performance/jvmstat/\" rel=\"noreferrer\">http://java.sun.com/performance/jvmstat/</a></p>\r\n<p>Here\'s a thread with someone who is worried that by turning&nbsp;<strong>on</strong>&nbsp;jvmstat - with the option&nbsp;<code>-XX:+UsePerfData</code>&nbsp;- will hurt performance.&nbsp;<a href=\"http://www.theserverside.com/discussions/thread.tss?thread_id=33833\" rel=\"noreferrer\">http://www.theserverside.com/discussions/thread.tss?thread_id=33833</a><br>(It probably won\'t since jvmstat is designed to be \"\'always on\', yet has negligible performance impact\".)</p>', 128, 29, '2022-04-27 01:02:28'),
(140, '<p><a href=\"http://docs.oracle.com/javase/7/docs/api/java/util/ArrayList.html\" rel=\"nofollow noreferrer\"><code>ArrayList</code>&nbsp;is not thread-safe</a>. You can obtain a thread-safe&nbsp;<code>List</code>&nbsp;with&nbsp;<a href=\"http://docs.oracle.com/javase/7/docs/api/java/util/Collections.html#synchronizedList%28java.util.List%29\" rel=\"nofollow noreferrer\"><code>Collections.synchronizedList</code></a>. However, it is much simpler to use an&nbsp;<code>AtomicInteger</code>&nbsp;in your case or&nbsp;<code>AtomicReference</code>&nbsp;in a more general case.</p>\r\n<pre class=\"lang-java s-code-block\"><code class=\"hljs language-java\"><span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">AtomicInteger</span> <span class=\"hljs-variable\">resultAtomicInteger</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">AtomicInteger</span>();\r\nDisplay.getCurrent().syncExec(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Runnable</span>() { \r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">run</span><span class=\"hljs-params\">()</span> {\r\n        <span class=\"hljs-type\">MessageBox</span> <span class=\"hljs-variable\">mb</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-comment\">/* ... */</span>;\r\n            <span class=\"hljs-comment\">/* set up messagebox */</span>\r\n        resultAtomicInteger.set(mb.open());\r\n}});\r\n<span class=\"hljs-keyword\">if</span> (SWT.OK == resultAtomicInteger.get()) { <span class=\"hljs-comment\">/* ... */</span> }</code></pre>', 129, 29, '2022-04-27 01:02:59'),
(141, '<p>I just tackled this problem and my first try was similar - array or list of desired type items. But after a while I made up something like this:</p>\r\n<pre class=\"lang-java s-code-block\"><code class=\"hljs language-java\"><span class=\"hljs-keyword\">abstract</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyRunnable</span>&lt;T&gt; <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Runnable</span>{\r\n    T result;\r\n}\r\nMyRunnable&lt;Integer&gt; runBlock = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">MyRunnable</span>&lt;Integer&gt;(){\r\n   <span class=\"hljs-type\">MessageBox</span> <span class=\"hljs-variable\">mb</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-comment\">/* ... */</span>;\r\n    <span class=\"hljs-comment\">/* set up messagebox */</span>\r\n   result = mb.open();\r\n}\r\nGUI.display().syncExec(runBlock);\r\nrunBlock.result; <span class=\"hljs-comment\">//holds a result Integer</span>\r\n</code></pre>\r\n<p>It\'s much tidier and removes redundant variables.</p>\r\n<p>BTW. My really first try was to use UIThreadRunnable, but I didn\'t want SWTBot dependency, so I dropped this solution. After I made my own solution I found out, they use similar work around in there.</p>', 129, 28, '2022-04-27 01:03:15'),
(142, '<p>This is not possible in a system that might use reflection.</p>\r\n<p>That said, a static analysis tool could do a pretty good job if you don\'t use ANY reflection.</p>', 130, 28, '2022-04-27 01:03:55'),
(143, '<p>Have you taken a look at Dependency Finder?</p>\r\n<p><a href=\"http://depfind.sourceforge.net/\" rel=\"nofollow noreferrer\">http://depfind.sourceforge.net/</a></p>\r\n<p>A handy list of most of the other available Java dependency tools is also available on that site.</p>', 130, 28, '2022-04-27 01:03:58'),
(144, '<p>I have used</p>\r\n<p><a href=\"http://code.google.com/p/jarjar/\" rel=\"nofollow noreferrer\">http://code.google.com/p/jarjar/</a></p>\r\n<p>and found it to be pretty good.</p>\r\n<p>Also, you will find out if you have broken any reflection easily if you have a good set of unit/acceptance tests :).</p>', 130, 28, '2022-04-27 01:04:04'),
(145, '<p>Something to add to Bill K\'s reply: you might not use reflection at all, but the JARs you are using might. I remember encountering something like that with xalan &amp; xerces, where a ClassNotFoundException has been thrown at runtime.</p>', 130, 28, '2022-04-27 01:04:10'),
(146, '<p>While i haven\'t personally used VisualVM, I saw this&nbsp;<a href=\"http://blog.xebia.com/loitering-objects-make-web-company-lose-money/\" rel=\"nofollow noreferrer\">blog post</a>&nbsp;just today that might have some useful information for you. He talks about profiling a production app using it.</p>', 131, 28, '2022-04-27 01:04:35'),
(147, '<div class=\"votecell post-layout--left\">\r\n<div class=\"js-voting-container d-flex jc-center fd-column ai-stretch gs4 fc-black-200\" data-post-id=\"153348\">I tried it on a dev box and found that when I turned off profiling it would shut Tomcat down unexpectedly. I\'d be very cautious about rolling this out to production- can you simulate load in a staging environment instead? It\'s not as good as the real thing, but it probably won\'t get you fired if it goes wrong...</div>\r\n</div>', 131, 28, '2022-04-27 01:04:52'),
(148, '<p>I\'ve used VisualVM before to profile something running locally. A big win was that I just start it up, and it can connect to the running JVM. It\'s easier to use than other profiling tools I\'ve used before and didn\'t seem to have as much overhead.</p>\r\n<p>I think it does sampling. The overhead on a CPU intensive application didn\'t seem significant. I didn\'t measure anything (I was interested in how my app performed, not how the tool performed), but it definitely didn\'t have the factor of 10 slowdown I\'m used to seeing from profiling.</p>', 131, 28, '2022-04-27 01:05:03'),
(149, '<p>For just monitoring your application, running VisualVM remotely should not slow it down much. If the system is not on the edge of collapsing, I still haven\'t seen any problems. It\'s basically just reading out information from the coarse grained built-in instrumentation of the JVM. If you start profiling, however, you\'ll have the same issues as with other profilers. Basically because they all work almost they same way, often using the support in the JVM.</p>\r\n<p>Many people have problems with running VisualVM remotely, due to firewall issues, but you can even run&nbsp;<a href=\"http://spjelkavik.wordpress.com/2009/08/27/running-visualvm-through-an-ssh-tunnel-with-socks/\" rel=\"nofollow noreferrer\">Visual VM remotely over ssh</a>, with some system properties set.</p>', 131, 28, '2022-04-27 01:05:11'),
(150, '<p>They\'re just properties of table1\'s table2 property.</p>\r\n<pre class=\"lang-java s-code-block\"><code class=\"hljs language-java\">select t1.table2.property1, t1.table2.property2, ... from table1 as t1\r\n</code></pre>\r\n<p>You might have to join, like so</p>\r\n<pre class=\"lang-java s-code-block\"><code class=\"hljs language-java\">select t2.property1, t2.property2, ... \r\n    from table1 as t1\r\n    inner join t1.table2 as t2\r\n</code></pre>\r\n<p>Here\'s the relevant part of the&nbsp;<a href=\"http://www.hibernate.org/hib_docs/reference/en/html/queryhql.html#queryhql-select\" rel=\"nofollow noreferrer\">hibernate doc</a>.</p>', 132, 28, '2022-04-27 01:05:45'),
(151, '<p>You can query on them, but you can\'t make it part of the where clause. E.g.,</p>\r\n<pre class=\"lang-java s-code-block\"><code class=\"hljs language-java\">select t1.table2.x from table1 as t1\r\n</code></pre>\r\n<p>would work, but</p>\r\n<pre class=\"lang-java s-code-block\"><code class=\"hljs language-java\">select t1 from table1 as t1 where t1.table2.x = foo\r\n</code></pre>\r\n<p>would not.</p>', 132, 28, '2022-04-27 01:05:51');
INSERT INTO `forumreply` (`id`, `forum_reply`, `post_id`, `user_id`, `created_at`) VALUES
(152, '<p>Let\'s say table2 has a column \"<code>color varchar(128)</code>\" and this column is properly mapped to Hibernate.</p>\r\n<p>You should be able to do something like this:</p>\r\n<pre class=\"lang-java s-code-block\"><code class=\"hljs language-java\">from table1 where table2.color = <span class=\"hljs-string\">\'red\'</span>\r\n</code></pre>\r\n<p>This will return all&nbsp;<code>table1</code>&nbsp;rows that are linked to a&nbsp;<code>table2</code>&nbsp;row whose&nbsp;<code>color</code>&nbsp;column is \'red\'. Note that in your Hibernate mapping, your&nbsp;<code>set</code>&nbsp;has the same name as the table it references. The above query uses the name of the&nbsp;<em>set</em>,&nbsp;<strong>not</strong>&nbsp;the name of the table.</p>', 132, 28, '2022-04-27 01:05:59'),
(153, '<p>You are correct. You can\'t do&nbsp;<code>new E()</code>. But you can change it to</p>\r\n<pre class=\"lang-java s-code-block\"><code class=\"hljs language-java\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">SomeContainer</span>&lt;E&gt; {\r\n    E <span class=\"hljs-title function_\">createContents</span><span class=\"hljs-params\">(Class&lt;E&gt; clazz)</span> {\r\n        <span class=\"hljs-keyword\">return</span> clazz.newInstance();\r\n    }\r\n}\r\n</code></pre>\r\n<p>It\'s a pain. But it works. Wrapping it in the factory pattern makes it a little more tolerable.</p>', 133, 28, '2022-04-27 01:06:30'),
(154, '<p>In Java 8 you can use the&nbsp;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/function/Supplier.html\" rel=\"noreferrer\"><code>Supplier</code></a>&nbsp;functional interface to achieve this pretty easily:</p>\r\n<pre class=\"lang-java s-code-block\"><code class=\"hljs language-java\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">SomeContainer</span>&lt;E&gt; {\r\n  <span class=\"hljs-keyword\">private</span> Supplier&lt;E&gt; supplier;\r\n\r\n  SomeContainer(Supplier&lt;E&gt; supplier) {\r\n    <span class=\"hljs-built_in\">this</span>.supplier = supplier;\r\n  }\r\n\r\n  E <span class=\"hljs-title function_\">createContents</span><span class=\"hljs-params\">()</span> {\r\n    <span class=\"hljs-keyword\">return</span> supplier.get();\r\n  }\r\n}\r\n</code></pre>\r\n<p>You would construct this class like this:</p>\r\n<pre class=\"lang-java s-code-block\"><code class=\"hljs language-java\">SomeContainer&lt;String&gt; stringContainer = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SomeContainer</span>&lt;&gt;(String::<span class=\"hljs-keyword\">new</span>);\r\n</code></pre>\r\n<p>The syntax&nbsp;<code>String::new</code>&nbsp;on that line is a&nbsp;<a href=\"https://docs.oracle.com/javase/tutorial/java/javaOO/methodreferences.html\" rel=\"noreferrer\">constructor reference</a>.</p>\r\n<p>If your constructor takes arguments you can use a lambda expression instead:</p>\r\n<pre class=\"lang-java s-code-block\"><code class=\"hljs language-java\">SomeContainer&lt;BigInteger&gt; bigIntegerContainer\r\n    = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SomeContainer</span>&lt;&gt;(() -&gt; <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BigInteger</span>(<span class=\"hljs-number\">1</span>));</code></pre>', 133, 28, '2022-04-27 01:06:38'),
(155, '<p>I don\'t know if this helps, but when you subclass (including anonymously) a generic type, the type information is available via reflection. e.g.,</p>\r\n<pre class=\"lang-java s-code-block\"><code class=\"hljs language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">abstract</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Foo</span>&lt;E&gt; {\r\n\r\n  <span class=\"hljs-keyword\">public</span> E instance;  \r\n\r\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Foo</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> Exception {\r\n    instance = ((Class)((ParameterizedType)<span class=\"hljs-built_in\">this</span>.getClass().\r\n       getGenericSuperclass()).getActualTypeArguments()[<span class=\"hljs-number\">0</span>]).newInstance();\r\n    ...\r\n  }\r\n\r\n}\r\n</code></pre>\r\n<p>So, when you subclass Foo, you get an instance of Bar e.g.,</p>\r\n<pre class=\"lang-java s-code-block\"><code class=\"hljs language-java\"><span class=\"hljs-comment\">// notice that this in anonymous subclass of Foo</span>\r\n<span class=\"hljs-keyword\">assert</span>( <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Foo</span>&lt;Bar&gt;() {}.instance <span class=\"hljs-keyword\">instanceof</span> Bar );\r\n</code></pre>\r\n<p>But it\'s a lot of work, and only works for subclasses. Can be handy though.</p>', 133, 28, '2022-04-27 01:06:46'),
(156, '<p>From&nbsp;<a href=\"http://docs.oracle.com/javase/tutorial/java/generics/restrictions.html\" rel=\"nofollow noreferrer\">Java Tutorial - Restrictions on Generics</a>:</p>\r\n<p><strong><a href=\"http://docs.oracle.com/javase/tutorial/java/generics/restrictions.html#createObjects\" rel=\"nofollow noreferrer\">Cannot Create Instances of Type Parameters</a></strong></p>\r\n<p>You cannot create an instance of a type parameter. For example, the following code causes a compile-time error:</p>\r\n<pre class=\"lang-java s-code-block\"><code class=\"hljs language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> &lt;E&gt; <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">append</span><span class=\"hljs-params\">(List&lt;E&gt; list)</span> {\r\n    <span class=\"hljs-type\">E</span> <span class=\"hljs-variable\">elem</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">E</span>();  <span class=\"hljs-comment\">// compile-time error</span>\r\n    list.add(elem);\r\n}\r\n</code></pre>\r\n<p>As a workaround, you can create an object of a type parameter through reflection:</p>\r\n<pre class=\"lang-java s-code-block\"><code class=\"hljs language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> &lt;E&gt; <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">append</span><span class=\"hljs-params\">(List&lt;E&gt; list, Class&lt;E&gt; cls)</span> <span class=\"hljs-keyword\">throws</span> Exception {\r\n    <span class=\"hljs-type\">E</span> <span class=\"hljs-variable\">elem</span> <span class=\"hljs-operator\">=</span> cls.getDeclaredConstructor().newInstance();   <span class=\"hljs-comment\">// OK</span>\r\n    list.add(elem);\r\n}\r\n</code></pre>\r\n<p>You can invoke the append method as follows:</p>\r\n<pre class=\"lang-java s-code-block\"><code class=\"hljs language-java\">List&lt;String&gt; ls = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();\r\nappend(ls, String.class);</code></pre>', 133, 28, '2022-04-27 01:06:56'),
(157, '<p>Yes, it\'s the same I believe...</p>\r\n<p><a href=\"http://www.netbeans.org/kb/docs/java/compile-on-save-screencast.html\" rel=\"nofollow noreferrer\">Here\'s a video showing it in action</a></p>', 134, 28, '2022-04-27 01:07:48'),
(158, '<p>If you are looking specifically for memory in JVM:</p>\r\n<pre class=\"lang-java s-code-block\"><code class=\"hljs language-java\"><span class=\"hljs-type\">Runtime</span> <span class=\"hljs-variable\">runtime</span> <span class=\"hljs-operator\">=</span> Runtime.getRuntime();\r\n\r\n<span class=\"hljs-type\">NumberFormat</span> <span class=\"hljs-variable\">format</span> <span class=\"hljs-operator\">=</span> NumberFormat.getInstance();\r\n\r\n<span class=\"hljs-type\">StringBuilder</span> <span class=\"hljs-variable\">sb</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringBuilder</span>();\r\n<span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">maxMemory</span> <span class=\"hljs-operator\">=</span> runtime.maxMemory();\r\n<span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">allocatedMemory</span> <span class=\"hljs-operator\">=</span> runtime.totalMemory();\r\n<span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">freeMemory</span> <span class=\"hljs-operator\">=</span> runtime.freeMemory();\r\n\r\nsb.append(<span class=\"hljs-string\">\"free memory: \"</span> + format.format(freeMemory / <span class=\"hljs-number\">1024</span>) + <span class=\"hljs-string\">\"&lt;br/&gt;\"</span>);\r\nsb.append(<span class=\"hljs-string\">\"allocated memory: \"</span> + format.format(allocatedMemory / <span class=\"hljs-number\">1024</span>) + <span class=\"hljs-string\">\"&lt;br/&gt;\"</span>);\r\nsb.append(<span class=\"hljs-string\">\"max memory: \"</span> + format.format(maxMemory / <span class=\"hljs-number\">1024</span>) + <span class=\"hljs-string\">\"&lt;br/&gt;\"</span>);\r\nsb.append(<span class=\"hljs-string\">\"total free memory: \"</span> + format.format((freeMemory + (maxMemory - allocatedMemory)) / <span class=\"hljs-number\">1024</span>) + <span class=\"hljs-string\">\"&lt;br/&gt;\"</span>);</code></pre>', 135, 28, '2022-04-27 01:11:10'),
(159, '<pre class=\"lang-java s-code-block\"><code class=\"hljs language-java\"><span class=\"hljs-keyword\">import</span> java.io.File;\r\n<span class=\"hljs-keyword\">import</span> java.text.NumberFormat;\r\n\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">SystemInfo</span> {\r\n\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">Runtime</span> <span class=\"hljs-variable\">runtime</span> <span class=\"hljs-operator\">=</span> Runtime.getRuntime();\r\n\r\n    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">info</span><span class=\"hljs-params\">()</span> {\r\n        <span class=\"hljs-type\">StringBuilder</span> <span class=\"hljs-variable\">sb</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringBuilder</span>();\r\n        sb.append(<span class=\"hljs-built_in\">this</span>.osInfo());\r\n        sb.append(<span class=\"hljs-built_in\">this</span>.memInfo());\r\n        sb.append(<span class=\"hljs-built_in\">this</span>.diskInfo());\r\n        <span class=\"hljs-keyword\">return</span> sb.toString();\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">osName</span><span class=\"hljs-params\">()</span> {\r\n        <span class=\"hljs-keyword\">return</span> System.getProperty(<span class=\"hljs-string\">\"os.name\"</span>);\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">osVersion</span><span class=\"hljs-params\">()</span> {\r\n        <span class=\"hljs-keyword\">return</span> System.getProperty(<span class=\"hljs-string\">\"os.version\"</span>);\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">osArch</span><span class=\"hljs-params\">()</span> {\r\n        <span class=\"hljs-keyword\">return</span> System.getProperty(<span class=\"hljs-string\">\"os.arch\"</span>);\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">long</span> <span class=\"hljs-title function_\">totalMem</span><span class=\"hljs-params\">()</span> {\r\n        <span class=\"hljs-keyword\">return</span> Runtime.getRuntime().totalMemory();\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">long</span> <span class=\"hljs-title function_\">usedMem</span><span class=\"hljs-params\">()</span> {\r\n        <span class=\"hljs-keyword\">return</span> Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">memInfo</span><span class=\"hljs-params\">()</span> {\r\n        <span class=\"hljs-type\">NumberFormat</span> <span class=\"hljs-variable\">format</span> <span class=\"hljs-operator\">=</span> NumberFormat.getInstance();\r\n        <span class=\"hljs-type\">StringBuilder</span> <span class=\"hljs-variable\">sb</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringBuilder</span>();\r\n        <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">maxMemory</span> <span class=\"hljs-operator\">=</span> runtime.maxMemory();\r\n        <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">allocatedMemory</span> <span class=\"hljs-operator\">=</span> runtime.totalMemory();\r\n        <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">freeMemory</span> <span class=\"hljs-operator\">=</span> runtime.freeMemory();\r\n        sb.append(<span class=\"hljs-string\">\"Free memory: \"</span>);\r\n        sb.append(format.format(freeMemory / <span class=\"hljs-number\">1024</span>));\r\n        sb.append(<span class=\"hljs-string\">\"&lt;br/&gt;\"</span>);\r\n        sb.append(<span class=\"hljs-string\">\"Allocated memory: \"</span>);\r\n        sb.append(format.format(allocatedMemory / <span class=\"hljs-number\">1024</span>));\r\n        sb.append(<span class=\"hljs-string\">\"&lt;br/&gt;\"</span>);\r\n        sb.append(<span class=\"hljs-string\">\"Max memory: \"</span>);\r\n        sb.append(format.format(maxMemory / <span class=\"hljs-number\">1024</span>));\r\n        sb.append(<span class=\"hljs-string\">\"&lt;br/&gt;\"</span>);\r\n        sb.append(<span class=\"hljs-string\">\"Total free memory: \"</span>);\r\n        sb.append(format.format((freeMemory + (maxMemory - allocatedMemory)) / <span class=\"hljs-number\">1024</span>));\r\n        sb.append(<span class=\"hljs-string\">\"&lt;br/&gt;\"</span>);\r\n        <span class=\"hljs-keyword\">return</span> sb.toString();\r\n\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">osInfo</span><span class=\"hljs-params\">()</span> {\r\n        <span class=\"hljs-type\">StringBuilder</span> <span class=\"hljs-variable\">sb</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringBuilder</span>();\r\n        sb.append(<span class=\"hljs-string\">\"OS: \"</span>);\r\n        sb.append(<span class=\"hljs-built_in\">this</span>.osName());\r\n        sb.append(<span class=\"hljs-string\">\"&lt;br/&gt;\"</span>);\r\n        sb.append(<span class=\"hljs-string\">\"Version: \"</span>);\r\n        sb.append(<span class=\"hljs-built_in\">this</span>.osVersion());\r\n        sb.append(<span class=\"hljs-string\">\"&lt;br/&gt;\"</span>);\r\n        sb.append(<span class=\"hljs-string\">\": \"</span>);\r\n        sb.append(<span class=\"hljs-built_in\">this</span>.osArch());\r\n        sb.append(<span class=\"hljs-string\">\"&lt;br/&gt;\"</span>);\r\n        sb.append(<span class=\"hljs-string\">\"Available processors (cores): \"</span>);\r\n        sb.append(runtime.availableProcessors());\r\n        sb.append(<span class=\"hljs-string\">\"&lt;br/&gt;\"</span>);\r\n        <span class=\"hljs-keyword\">return</span> sb.toString();\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">diskInfo</span><span class=\"hljs-params\">()</span> {\r\n        <span class=\"hljs-comment\">/* Get a list of all filesystem roots on this system */</span>\r\n        File[] roots = File.listRoots();\r\n        <span class=\"hljs-type\">StringBuilder</span> <span class=\"hljs-variable\">sb</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringBuilder</span>();\r\n\r\n        <span class=\"hljs-comment\">/* For each filesystem root, print some info */</span>\r\n        <span class=\"hljs-keyword\">for</span> (File root : roots) {\r\n            sb.append(<span class=\"hljs-string\">\"File system root: \"</span>);\r\n            sb.append(root.getAbsolutePath());\r\n            sb.append(<span class=\"hljs-string\">\"&lt;br/&gt;\"</span>);\r\n            sb.append(<span class=\"hljs-string\">\"Total space (bytes): \"</span>);\r\n            sb.append(root.getTotalSpace());\r\n            sb.append(<span class=\"hljs-string\">\"&lt;br/&gt;\"</span>);\r\n            sb.append(<span class=\"hljs-string\">\"Free space (bytes): \"</span>);\r\n            sb.append(root.getFreeSpace());\r\n            sb.append(<span class=\"hljs-string\">\"&lt;br/&gt;\"</span>);\r\n            sb.append(<span class=\"hljs-string\">\"Usable space (bytes): \"</span>);\r\n            sb.append(root.getUsableSpace());\r\n            sb.append(<span class=\"hljs-string\">\"&lt;br/&gt;\"</span>);\r\n        }\r\n        <span class=\"hljs-keyword\">return</span> sb.toString();\r\n    }\r\n}</code></pre>', 135, 28, '2022-04-27 01:11:18'),
(160, '<h1>tl;dr</h1>\n<p>The accepted&nbsp;<a href=\"https://stackoverflow.com/a/74652/642706\">Answer by Vinko Vrsalovic</a>&nbsp;is correct. Your input is whole minutes, so the milliseconds for fractional second should indeed be zero.</p>\n<p>Use&nbsp;<em>java.time</em>.</p>\n<pre class=\"lang-java s-code-block\"><code class=\"hljs language-java\">LocalDateTime.parse\n( \n    <span class=\"hljs-string\">\"06-04-2007 07:05\"</span> , \n    DateTimeFormatter.ofPattern( <span class=\"hljs-string\">\"MM-dd-uuuu HH:mm\"</span> ) \n)\n.atZone\n(\n    ZoneId.of( <span class=\"hljs-string\">\"Africa/Casablanca\"</span> ) \n)\n.toInstant()\n.getEpochMilli()\n</code></pre>\n<h1><em>java.time</em></h1>\n<p>The modern approach uses the&nbsp;<em>java.time</em>&nbsp;classes defined in JSR 310 that years ago supplanted the terrible classes you are using.</p>\n<p>Define a formatting pattern to match your input. FYI: Learn to use standard ISO 8601 formats for exchanging date-time values as text.</p>\n<pre class=\"lang-java s-code-block\"><code class=\"hljs language-java\"><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">input</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">\"06-04-2007 07:05\"</span> ;\n<span class=\"hljs-type\">DateTimeFormatter</span> <span class=\"hljs-variable\">f</span> <span class=\"hljs-operator\">=</span> DateTimeFormatter.ofPattern( <span class=\"hljs-string\">\"MM-dd-uuuu HH:mm\"</span> ) ;\n</code></pre>\n<p>Parse your input as a&nbsp;<code>LocalDateTime</code>, as it lacks an indicator of time zone or offset-from-UTC.</p>\n<pre class=\"lang-java s-code-block\"><code class=\"hljs language-java\"><span class=\"hljs-type\">LocalDateTime</span> <span class=\"hljs-variable\">ldt</span> <span class=\"hljs-operator\">=</span> LocalDateTime.parse( input , f ) ;\n</code></pre>\n<p>This represents a date and a time-of-day, but lacks the context of a time zone or offset. So we do not know if you meant 7 AM in Tokyo Japan, 7 AM in Toulouse France, or 7 AM in Toledo Ohio US. This issue of time zone is crucial, because your desired count of milliseconds is a count since the first moment of 1970 as seen in UTC (an offset of zero hours-minutes-seconds), 1970-01-01T00:00Z.</p>\n<p>So we must place your input value, the&nbsp;<a href=\"https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/time/LocalDateTime.html\" rel=\"nofollow noreferrer\"><code>LocalDateTime</code></a>&nbsp;object, in the context of a time zone or offset.</p>\n<p>If your input was intended to represent a date and time in UTC, use&nbsp;<a href=\"https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/time/OffsetDateTime.html\" rel=\"nofollow noreferrer\"><code>OffsetDateTime</code></a>&nbsp;with&nbsp;<a href=\"https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/time/ZoneOffset.html#UTC\" rel=\"nofollow noreferrer\"><code>ZoneOffset.UTC</code></a>.</p>\n<pre class=\"lang-java s-code-block\"><code class=\"hljs language-java\"><span class=\"hljs-type\">OffsetDateTime</span> <span class=\"hljs-variable\">odt</span> <span class=\"hljs-operator\">=</span> ldt.atOffset( ZoneOffset.UTC ) ;  <span class=\"hljs-comment\">// Do this if your date and time represent a moment as seen in UTC. </span>\n</code></pre>\n<p>If your input was intended to represent a date and time as seen through the wall-clock time used by the people of a particular region, use&nbsp;<a href=\"https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/time/ZonedDateTime.html\" rel=\"nofollow noreferrer\"><code>ZonedDateTime</code></a>.</p>\n<pre class=\"lang-java s-code-block\"><code class=\"hljs language-java\"><span class=\"hljs-type\">ZoneId</span> <span class=\"hljs-variable\">z</span> <span class=\"hljs-operator\">=</span> ZoneId.of( <span class=\"hljs-string\">\"Asia/Tokyo\"</span> ) ;\n<span class=\"hljs-type\">ZonedDateTime</span> <span class=\"hljs-variable\">zdt</span> <span class=\"hljs-operator\">=</span> ldt.atZone( z ) ;\n</code></pre>\n<p>Next we want to interrogate for the count of milliseconds since the epoch of first moment of 1970 in UTC. With either a&nbsp;<code>OffsetDateTime</code>&nbsp;or&nbsp;<code>ZonedDateTime</code>&nbsp;object in hand, extract a&nbsp;<code>Instant</code>&nbsp;by calling&nbsp;<code>toInstant</code>.</p>\n<pre class=\"lang-java s-code-block\"><code class=\"hljs language-java\"><span class=\"hljs-type\">Instant</span> <span class=\"hljs-variable\">instant</span> <span class=\"hljs-operator\">=</span> odt.toInstant() ;\n</code></pre>\n<p>&hellip;or&hellip;</p>\n<pre class=\"lang-java s-code-block\"><code class=\"hljs language-java\"><span class=\"hljs-type\">Instant</span> <span class=\"hljs-variable\">instant</span> <span class=\"hljs-operator\">=</span> zdt.toInstant() ;\n</code></pre>\n<p>Now get count of milliseconds.</p>\n<pre class=\"lang-java s-code-block\"><code class=\"hljs language-java\"><span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">millisecondsSinceEpoch</span> <span class=\"hljs-operator\">=</span> instant.toEpochMilli() ;\n</code></pre>\n<p>By the way, I suggest you not track time by a count of milliseconds. Use ISO 8601 formatted text instead: easy to parse by machine, easy to read by humans across cultures. A count of milliseconds is neither.</p>\n<hr>\n<p><a href=\"https://i.stack.imgur.com/CNlDF.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/CNlDF.png\" alt=\"Table of date-time types in Java, both modern and legacy\"></a></p>\n<hr>\n<h1>About&nbsp;<em>java.time</em></h1>\n<p>The&nbsp;<a href=\"https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/time/package-summary.html\" rel=\"nofollow noreferrer\"><em>java.time</em></a>&nbsp;framework is built into Java 8 and later. These classes supplant the troublesome old&nbsp;<a href=\"https://en.wikipedia.org/wiki/Legacy_system\" rel=\"nofollow noreferrer\">legacy</a>&nbsp;date-time classes such as&nbsp;<a href=\"https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Date.html\" rel=\"nofollow noreferrer\"><code>java.util.Date</code></a>,&nbsp;<a href=\"https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Calendar.html\" rel=\"nofollow noreferrer\"><code>Calendar</code></a>, &amp;&nbsp;<a href=\"https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/text/SimpleDateFormat.html\" rel=\"nofollow noreferrer\"><code>SimpleDateFormat</code></a>.</p>\n<p>To learn more, see the&nbsp;<a href=\"http://docs.oracle.com/javase/tutorial/datetime/TOC.html\" rel=\"nofollow noreferrer\"><em>Oracle Tutorial</em></a>. And search Stack Overflow for many examples and explanations. Specification is&nbsp;<a href=\"https://jcp.org/en/jsr/detail?id=310\" rel=\"nofollow noreferrer\">JSR 310</a>.</p>\n<p>The&nbsp;<a href=\"http://www.joda.org/joda-time/\" rel=\"nofollow noreferrer\"><em>Joda-Time</em></a>&nbsp;project, now in&nbsp;<a href=\"https://en.wikipedia.org/wiki/Maintenance_mode\" rel=\"nofollow noreferrer\">maintenance mode</a>, advises migration to the&nbsp;<a href=\"https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/time/package-summary.html\" rel=\"nofollow noreferrer\">java.time</a>&nbsp;classes.</p>\n<p>You may exchange&nbsp;<em>java.time</em>&nbsp;objects directly with your database. Use a&nbsp;<a href=\"https://en.wikipedia.org/wiki/JDBC_driver\" rel=\"nofollow noreferrer\">JDBC driver</a>&nbsp;compliant with&nbsp;<a href=\"http://openjdk.java.net/jeps/170\" rel=\"nofollow noreferrer\">JDBC 4.2</a>&nbsp;or later. No need for strings, no need for&nbsp;<code>java.sql.*</code>&nbsp;classes. Hibernate 5 &amp; JPA 2.2 support&nbsp;<em>java.time</em>.</p>\n<p>Where to obtain the java.time classes?</p>\n<ul>\n<li><a href=\"https://en.wikipedia.org/wiki/Java_version_history#Java_SE_8\" rel=\"nofollow noreferrer\"><strong>Java SE 8</strong></a>,&nbsp;<a href=\"https://en.wikipedia.org/wiki/Java_version_history#Java_SE_9\" rel=\"nofollow noreferrer\"><strong>Java SE 9</strong></a>,&nbsp;<a href=\"https://en.wikipedia.org/wiki/Java_version_history#Java_SE_10\" rel=\"nofollow noreferrer\"><strong>Java SE 10</strong></a>,&nbsp;<a href=\"https://en.wikipedia.org/wiki/Java_version_history#Java_SE_11\" rel=\"nofollow noreferrer\"><strong>Java SE 11</strong></a>, and later - Part of the standard Java API with a bundled implementation.\n<ul>\n<li>Java 9 adds some minor features and fixes.</li>\n</ul>\n</li>\n<li><a href=\"https://en.wikipedia.org/wiki/Java_version_history#Java_SE_6\" rel=\"nofollow noreferrer\"><strong>Java SE 6</strong></a>&nbsp;and&nbsp;<a href=\"https://en.wikipedia.org/wiki/Java_version_history#Java_SE_7\" rel=\"nofollow noreferrer\"><strong>Java SE 7</strong></a>\n<ul>\n<li>Most of the&nbsp;<em>java.time</em>&nbsp;functionality is back-ported to Java 6 &amp; 7 in&nbsp;<a href=\"http://www.threeten.org/threetenbp/\" rel=\"nofollow noreferrer\"><strong><em>ThreeTen-Backport</em></strong></a>.</li>\n</ul>\n</li>\n<li><a href=\"https://en.wikipedia.org/wiki/Android_(operating_system)\" rel=\"nofollow noreferrer\"><strong>Android</strong></a>\n<ul>\n<li>Later versions of Android bundle implementations of the&nbsp;<em>java.time</em>&nbsp;classes.</li>\n<li>For earlier Android (&lt;26), the&nbsp;<a href=\"https://github.com/JakeWharton/ThreeTenABP\" rel=\"nofollow noreferrer\"><strong><em>ThreeTenABP</em></strong></a>&nbsp;project adapts&nbsp;<a href=\"http://www.threeten.org/threetenbp/\" rel=\"nofollow noreferrer\"><strong><em>ThreeTen-Backport</em></strong></a>&nbsp;(mentioned above). See&nbsp;<a href=\"http://stackoverflow.com/q/38922754/642706\"><em>How to use ThreeTenABP&hellip;</em></a>.</li>\n</ul>\n</li>\n</ul>', 136, 28, '2022-04-27 01:11:59'),
(165, '<p>ss</p>', 116, 29, '2022-04-30 05:14:21');

-- --------------------------------------------------------

--
-- Table structure for table `lessons`
--

CREATE TABLE `lessons` (
  `id` int(11) NOT NULL,
  `title` text NOT NULL,
  `course` varchar(255) NOT NULL,
  `description` text NOT NULL,
  `body` text NOT NULL,
  `code-snippet` text NOT NULL,
  `language` varchar(255) NOT NULL,
  `created_at` datetime NOT NULL DEFAULT current_timestamp()
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

--
-- Dumping data for table `lessons`
--

INSERT INTO `lessons` (`id`, `title`, `course`, `description`, `body`, `code-snippet`, `language`, `created_at`) VALUES
(17, 'Introduction to Java', 'HELLO WORLD', 'Welcome to the world of Java programming!', '<p class=\"p__1qg33Igem5pAgn4kPMirjw\">Welcome to the world of Java programming!</p>\r\n<p class=\"p__1qg33Igem5pAgn4kPMirjw\">Programming languages enable humans to write instructions that a computer can perform. With precise instructions, computers coordinate applications and systems that run the modern world.</p>\r\n<p class=\"p__1qg33Igem5pAgn4kPMirjw\"><a class=\"e14vpv2g1 gamut-xro1w8-ResetElement-Anchor-AnchorBase e1bhhzie0\" href=\"https://en.wikipedia.org/wiki/Sun_Microsystems\" target=\"_blank\" rel=\"noopener\">Sun Microsystems</a>&nbsp;released the Java programming language in 1995. Java is known for being simple, portable, secure, and robust. Though it was released over twenty years ago, Java remains one of the most popular programming languages today.</p>\r\n<p class=\"p__1qg33Igem5pAgn4kPMirjw\">One reason people love Java is the Java Virtual Machine, which ensures the same Java code can be run on different operating systems and platforms. Sun Microsystems&rsquo; slogan for Java was &ldquo;write once, run everywhere&rdquo;.</p>\r\n<p class=\"p__1qg33Igem5pAgn4kPMirjw\">Programming languages are composed of&nbsp;<em>syntax</em>, the specific instructions which Java understands. We write syntax in files to create&nbsp;<em>programs</em>, which are executed by the computer to perform the desired task.</p>\r\n<p class=\"p__1qg33Igem5pAgn4kPMirjw\">Let&rsquo;s start with the universal greeting for a programming language. We&rsquo;ll explore the syntax in the next exercise.</p>\r\n<ol>\r\n<li class=\"p__1qg33Igem5pAgn4kPMirjw\">\r\n<p class=\"p__1qg33Igem5pAgn4kPMirjw\">You&rsquo;re looking at a computer program written in Java.</p>\r\n<p class=\"p__1qg33Igem5pAgn4kPMirjw\">Run the code in the text editor to see what is printed to the screen.</p>\r\n</li>\r\n</ol>', '<pre class=\"language-java\"><code>public class Solution{\r\n  public static void main(String[] args) {\r\n    System.out.println(\"Hello World!\");\r\n  }\r\n}</code></pre>', 'java', '2022-04-26 21:15:46'),
(18, 'Java Variables', 'Variable', 'Learn the Variables in Java', '<p class=\"p__1qg33Igem5pAgn4kPMirjw\">Let&rsquo;s say we need a program that connects a user with new jobs. We need the user&rsquo;s name, their salary, and their employment status. All of these pieces of information are stored in our program.</p>\r\n<p class=\"p__1qg33Igem5pAgn4kPMirjw\">We store information in&nbsp;<em>variables</em>, named locations in memory.</p>\r\n<p class=\"p__1qg33Igem5pAgn4kPMirjw\">Naming a piece of information allows us to use that name later, accessing the information we stored.</p>\r\n<p class=\"p__1qg33Igem5pAgn4kPMirjw\">Variables also give context and meaning to the data we&rsquo;re storing. The value&nbsp;<code class=\"code__2rdF32qjRVp7mMVBHuPwDS\">42</code>&nbsp;could be someone&rsquo;s age, a weight in pounds, or the number of orders placed. With a name, we&nbsp;<strong>know</strong>&nbsp;the value&nbsp;<code class=\"code__2rdF32qjRVp7mMVBHuPwDS\">42</code>&nbsp;is&nbsp;<code class=\"code__2rdF32qjRVp7mMVBHuPwDS\">age</code>,&nbsp;<code class=\"code__2rdF32qjRVp7mMVBHuPwDS\">weightInPounds</code>, or&nbsp;<code class=\"code__2rdF32qjRVp7mMVBHuPwDS\">numOrdersPlaced</code>.</p>\r\n<p class=\"p__1qg33Igem5pAgn4kPMirjw\">In Java, we specify the type of information we&rsquo;re storing.&nbsp;<em>Primitive datatypes</em>&nbsp;are types of data built-in to the Java system. The three main primitive types we&rsquo;ll cover are&nbsp;<code class=\"code__2rdF32qjRVp7mMVBHuPwDS\">int</code>,&nbsp;<code class=\"code__2rdF32qjRVp7mMVBHuPwDS\">double</code>, and&nbsp;<code class=\"code__2rdF32qjRVp7mMVBHuPwDS\">boolean</code>; this lesson will introduce these built-in types and more.</p>\r\n<p class=\"p__1qg33Igem5pAgn4kPMirjw\">We must&nbsp;<em>declare</em>&nbsp;a variable to reference it within our program. Declaring a variable requires that we specify the type and name:</p>\r\n<pre><code></code></pre>\r\n<div class=\"gamut-6x0oro-ColorizedContainer e1hgti5c0\" data-lang=\"codecademy-java\"><span class=\"mtk16\">// datatype variableName</span><br><span class=\"mtk9\">int</span> <span class=\"mtk9\">age</span><span class=\"mtk1\">;</span><br><span class=\"mtk9\">double</span> <span class=\"mtk9\">salaryRequirement</span><span class=\"mtk1\">;</span><br><span class=\"mtk9\">boolean</span> <span class=\"mtk9\">isEmployed</span><span class=\"mtk1\">;</span></div>\r\n<pre><code></code></pre>\r\n<p class=\"p__1qg33Igem5pAgn4kPMirjw\">The names of the variables above are&nbsp;<code class=\"code__2rdF32qjRVp7mMVBHuPwDS\">age</code>,&nbsp;<code class=\"code__2rdF32qjRVp7mMVBHuPwDS\">salaryRequirement</code>, and&nbsp;<code class=\"code__2rdF32qjRVp7mMVBHuPwDS\">isEmployed</code>.</p>\r\n<p class=\"p__1qg33Igem5pAgn4kPMirjw\">These variables don&rsquo;t have any associated value. To assign a value to a variable, we use the assignment operator&nbsp;<code class=\"code__2rdF32qjRVp7mMVBHuPwDS\">=</code>:</p>\r\n<pre><code></code></pre>\r\n<div class=\"gamut-6x0oro-ColorizedContainer e1hgti5c0\" data-lang=\"codecademy-java\"><span class=\"mtk9\">age</span><span class=\"mtk1\"> =&nbsp;</span><span class=\"mtk9\">85</span><span class=\"mtk1\">;</span></div>\r\n<pre><code></code></pre>\r\n<p class=\"p__1qg33Igem5pAgn4kPMirjw\">Now,&nbsp;<code class=\"code__2rdF32qjRVp7mMVBHuPwDS\">age</code>&nbsp;has a value of&nbsp;<code class=\"code__2rdF32qjRVp7mMVBHuPwDS\">85</code>. When code is used to represent a fixed value, like&nbsp;<code class=\"code__2rdF32qjRVp7mMVBHuPwDS\">85</code>, it is referred to as a&nbsp;<em>literal</em>.</p>\r\n<p class=\"p__1qg33Igem5pAgn4kPMirjw\">It&rsquo;s also common to declare a variable and assign it a value in one line!</p>\r\n<p class=\"p__1qg33Igem5pAgn4kPMirjw\">For example, to assign&nbsp;<code class=\"code__2rdF32qjRVp7mMVBHuPwDS\">2021</code>&nbsp;to a variable named&nbsp;<code class=\"code__2rdF32qjRVp7mMVBHuPwDS\">yearCodeDabbleWasFounded</code>&nbsp;of type&nbsp;<code class=\"code__2rdF32qjRVp7mMVBHuPwDS\">int</code>, we write:</p>\r\n<pre><code></code></pre>\r\n<div class=\"gamut-6x0oro-ColorizedContainer e1hgti5c0\" data-lang=\"codecademy-java\"><span class=\"mtk9\">int</span> <span class=\"mtk9\">yearCodecademyWasFounded</span><span class=\"mtk1\"> =&nbsp;</span><span class=\"mtk9\">2011</span><span class=\"mtk1\">;</span></div>\r\n<div class=\"gamut-6x0oro-ColorizedContainer e1hgti5c0\" data-lang=\"codecademy-java\">&nbsp;</div>\r\n<div class=\"gamut-6x0oro-ColorizedContainer e1hgti5c0\" data-lang=\"codecademy-java\">&nbsp;</div>\r\n<ol>\r\n<li><code></code>\r\n<p class=\"p__1qg33Igem5pAgn4kPMirjw\">In <strong>Creator.java</strong>, we have defined some variables related to James Gosling, the creator of Java.</p>\r\n<p class=\"p__1qg33Igem5pAgn4kPMirjw\">Inside&nbsp;<code class=\"code__2rdF32qjRVp7mMVBHuPwDS\">main()</code>, use&nbsp;<code class=\"code__2rdF32qjRVp7mMVBHuPwDS\">System.out.println()</code>&nbsp;to print out the variable&nbsp;<code class=\"code__2rdF32qjRVp7mMVBHuPwDS\">name</code>.</p>\r\n</li>\r\n</ol>', '<pre class=\"language-java\"><code>public class Solution{\r\n  public static void main(String[] args) {\r\n    String name = \"James Gosling\";\r\n    int yearCreated = 1995;\r\n  }\r\n}</code></pre>', 'java', '2022-04-26 21:32:22'),
(20, 'Object-Oriented Programming', 'Introduction to Classes', 'JAVA: INTRODUCTION TO CLASSES', '<p class=\"p__1qg33Igem5pAgn4kPMirjw\">All programs require one or more classes that act as a model for the world.</p>\r\n<p class=\"p__1qg33Igem5pAgn4kPMirjw\">For example, a program to track student test scores might have&nbsp;<code class=\"code__2rdF32qjRVp7mMVBHuPwDS\">Student</code>,&nbsp;<code class=\"code__2rdF32qjRVp7mMVBHuPwDS\">Course</code>, and&nbsp;<code class=\"code__2rdF32qjRVp7mMVBHuPwDS\">Grade</code>&nbsp;classes. Our real-world concerns, students and their grades, are inside the program as classes.</p>\r\n<p class=\"p__1qg33Igem5pAgn4kPMirjw\">We represent each student as an&nbsp;<em>instance</em>, or&nbsp;<em>object</em>, of the&nbsp;<code class=\"code__2rdF32qjRVp7mMVBHuPwDS\">Student</code>&nbsp;class.</p>\r\n<p class=\"p__1qg33Igem5pAgn4kPMirjw\">This is&nbsp;<em>object-oriented programming</em> because programs are built around objects and their interactions. An object contains state and behavior.</p>\r\n<p class=\"p__1qg33Igem5pAgn4kPMirjw\">Classes are a blueprint for objects. Blueprints detail the general structure. For example, all students have an ID, all courses can enroll a student, etc.</p>\r\n<p class=\"p__1qg33Igem5pAgn4kPMirjw\">An instance is the thing itself.&nbsp;<em>This</em>&nbsp;student has an ID of&nbsp;<code class=\"code__2rdF32qjRVp7mMVBHuPwDS\">42</code>,&nbsp;<em>this</em>&nbsp;course enrolled&nbsp;<em>that</em>&nbsp;student, etc.</p>\r\n<p class=\"p__1qg33Igem5pAgn4kPMirjw\">Let&rsquo;s review with another example, a savings account at a bank.</p>\r\n<p class=\"p__1qg33Igem5pAgn4kPMirjw\">What should a savings account know?</p>\r\n<ul class=\"ul__11icM1EC_0uPj3OY0Skp4r\">\r\n<li class=\"li__1KqBjwbWA3ze6V0BvXq9Rx\">The balance of money available.</li>\r\n</ul>\r\n<p class=\"p__1qg33Igem5pAgn4kPMirjw\">What should a savings account do?</p>\r\n<ul class=\"ul__11icM1EC_0uPj3OY0Skp4r\">\r\n<li class=\"li__1KqBjwbWA3ze6V0BvXq9Rx\">Deposit money.</li>\r\n<li class=\"li__1KqBjwbWA3ze6V0BvXq9Rx\">Withdraw money.</li>\r\n</ul>\r\n<p>Imagine two people have accounts that are instances of the&nbsp;<code class=\"code__2rdF32qjRVp7mMVBHuPwDS\">SavingsAccount</code> class. They share behavior (how they deposit and withdraw) but have individual state (their balances), and even with the same balance amount these accounts are separate entities.</p>\r\n<ul>\r\n<li>\r\n<p>In Java, an object is created from a class. We have already created the class named&nbsp;<code class=\"w3-codespan\">Main</code>, so now we can use this to create objects.</p>\r\n<p>To create an object of&nbsp;<code class=\"w3-codespan\">Main</code>, specify the class name, followed by the object name, and use the keyword&nbsp;<code class=\"w3-codespan\">new</code>:</p>\r\n</li>\r\n</ul>', '<pre class=\"language-java\"><code>public class Solution{\n  // instance fields\n  String productType;\n  int inventoryCount;\n  double inventoryPrice;\n  \n  // constructor method\n  public Store(String product, int count, double price) {\n    productType = product;\n    inventoryCount = count;\n    inventoryPrice = price;\n  }\n  \n  // main method\n  public static void main(String[] args) {\n    Store lemonadeStand = new Store(\"lemonade\", 42, .99);\n    Store cookieShop = new Store(\"cookies\", 12, 3.75);\n    \n    System.out.println(\"Our first shop sells \" + lemonadeStand.productType + \" at \" + lemonadeStand.inventoryPrice + \" per unit.\");\n    \n    System.out.println(\"Our second shop has \" + cookieShop.inventoryCount + \" units remaining.\");\n  }\n}</code></pre>', 'java', '2022-04-26 21:40:48'),
(21, 'Java Conditional Statements', 'Introduction to Control Flow', 'CONDITIONALS AND CONTROL FLOW', '<p class=\"p__1qg33Igem5pAgn4kPMirjw\">Imagine we&rsquo;re writing a program that enrolls students in courses.</p>\r\n<ul class=\"ul__11icM1EC_0uPj3OY0Skp4r\">\r\n<li class=\"li__1KqBjwbWA3ze6V0BvXq9Rx\"><em>If</em>&nbsp;a student has completed the prerequisites,&nbsp;<em>then</em>&nbsp;they can enroll in a course.</li>\r\n<li class=\"li__1KqBjwbWA3ze6V0BvXq9Rx\"><em>Else</em>, they need to take the prerequisite courses.</li>\r\n</ul>\r\n<p class=\"p__1qg33Igem5pAgn4kPMirjw\">They can&rsquo;t take Physics II without finishing Physics I.</p>\r\n<p class=\"p__1qg33Igem5pAgn4kPMirjw\">We represent this kind of decision-making in our program using&nbsp;<em>conditional</em>&nbsp;or&nbsp;<em>control flow</em>&nbsp;statements. Before this point, our code runs line-by-line from the top down, but conditional statements allow us to be selective in which portions will run.</p>\r\n<p class=\"p__1qg33Igem5pAgn4kPMirjw\">Conditional statements check a&nbsp;<code class=\"code__2rdF32qjRVp7mMVBHuPwDS\">boolean</code>&nbsp;condition and run a&nbsp;<em>block</em>&nbsp;of code depending on the condition. Curly braces mark the scope of a conditional block similar to a method or class.</p>\r\n<p class=\"p__1qg33Igem5pAgn4kPMirjw\">Here&rsquo;s a complete conditional statement:</p>\r\n<pre class=\"language-java\"><code>if (true) {\r\n \r\n  System.out.println(\"Hello World!\");\r\n \r\n}</code></pre>\r\n<p class=\"p__1qg33Igem5pAgn4kPMirjw\">If the condition is&nbsp;<code class=\"code__2rdF32qjRVp7mMVBHuPwDS\">true</code>, then the block is run. So&nbsp;<code class=\"code__2rdF32qjRVp7mMVBHuPwDS\">Hello World!</code>&nbsp;is printed.</p>\r\n<p class=\"p__1qg33Igem5pAgn4kPMirjw\">But suppose the condition is different:</p>\r\n<pre class=\"language-java\"><code>if (false) {\r\n \r\n  System.out.println(\"Hello World!\");\r\n \r\n}</code></pre>\r\n<p class=\"p__1qg33Igem5pAgn4kPMirjw\">If the condition is&nbsp;<code class=\"code__2rdF32qjRVp7mMVBHuPwDS\">false</code>, then the block does not run.</p>\r\n<p class=\"p__1qg33Igem5pAgn4kPMirjw\">This code is also called&nbsp;<em>if-then</em>&nbsp;statements: &ldquo;If&nbsp;<code class=\"code__2rdF32qjRVp7mMVBHuPwDS\">(condition)</code>&nbsp;is&nbsp;<code class=\"code__2rdF32qjRVp7mMVBHuPwDS\">true</code>, then do something&rdquo;.</p>', '<pre class=\"language-java\"><code>public class Solution{\r\n  public static void main(String[] args) {\r\n    \r\n    \r\n    \r\n  }\r\n}</code></pre>', 'java', '2022-04-26 21:45:40');

-- --------------------------------------------------------

--
-- Table structure for table `likes`
--

CREATE TABLE `likes` (
  `id` int(11) NOT NULL,
  `user_id` int(11) NOT NULL,
  `post_id` int(11) NOT NULL,
  `comment_id` int(11) NOT NULL,
  `created_at` datetime NOT NULL DEFAULT current_timestamp(),
  `updated_at` datetime NOT NULL DEFAULT current_timestamp()
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- --------------------------------------------------------

--
-- Table structure for table `post-likes`
--

CREATE TABLE `post-likes` (
  `id` int(11) NOT NULL,
  `user_id` int(11) NOT NULL,
  `post_id` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

--
-- Dumping data for table `post-likes`
--

INSERT INTO `post-likes` (`id`, `user_id`, `post_id`) VALUES
(129, 34, 123),
(130, 28, 118),
(131, 28, 123),
(145, 28, 125),
(148, 28, 126),
(150, 28, 119),
(152, 28, 28),
(153, 28, 28),
(154, 28, 28),
(155, 28, 28),
(157, 29, 28),
(158, 29, 28),
(161, 28, 116);

-- --------------------------------------------------------

--
-- Table structure for table `users`
--

CREATE TABLE `users` (
  `id` int(11) NOT NULL,
  `uploaded_flleinfo` varchar(255) NOT NULL,
  `address` text NOT NULL,
  `bio` text NOT NULL,
  `user_name` varchar(100) DEFAULT NULL,
  `user_email` varchar(100) DEFAULT NULL,
  `user_password` varchar(200) DEFAULT NULL,
  `user_created_at` timestamp NOT NULL DEFAULT current_timestamp(),
  `updated_at` datetime NOT NULL DEFAULT current_timestamp()
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

--
-- Dumping data for table `users`
--

INSERT INTO `users` (`id`, `uploaded_flleinfo`, `address`, `bio`, `user_name`, `user_email`, `user_password`, `user_created_at`, `updated_at`) VALUES
(28, '1651016490_28671c0e9ac9460e0269.jpg', 'Unit 431 Bldg 4 Guadalupe Bliss', 'benedict is a humor writer, and his website bio reflects that. Though a lot of comic writers have a serious bio highlighting their achievements, benedict manages to amuse readers with his piece. The first line says, “benedict has been a professional humorist ever since he discovered that professional humor was a lot easier than working.”', 'benedict', 'jbareta2@gmail.com', '$2y$10$7A3XmcS.cMnfXeK6FM3BsuEYXvrRGqOH0nrwIA59cFIM09mmEj2sK', '2022-04-26 09:19:15', '2022-04-26 17:19:15'),
(29, '1651229488_6429c9a18d55ef438c6e.jpg', 'laguna lang', 'Sya si niel', 'Nielniel', 'niel@gmail.com', '$2y$10$HtPe0UdjAW81UqRRCOcD3.0CzK2s8A6ko5WV9oKudwkggjbIEwuQW', '2022-04-26 10:09:11', '2022-04-26 18:09:11'),
(30, '1651028976_4016587c8afbabbf52b2.png', '', '', 'Giselle Fuller', 'luxiwu@mailinator.com', '$2y$10$RNt/SeL91p51Smc6/Z/9gOd/PYHJLXWaoJl9GUJKBX38BwSdTqjaa', '2022-04-27 02:48:58', '2022-04-27 10:48:58'),
(31, '1651031099_2895ff0cf61fd7cc3313.png', '', '', 'Brynne Buck', 'nyjujot@mailinator.com', '$2y$10$J2/g5E5Mz0emJS5D3mMwiuHDzTB6TyZHz6MnBaGt3Jb6fxCblaJb2', '2022-04-27 03:14:55', '2022-04-27 11:14:55'),
(32, '1651031504_6e5a56f7e25de32e9d23.png', 'sss', 'asdad', 'Sybill Fox', 'memevev@mailinator.com', '$2y$10$ulZMpZy/sH8WgtLYiouvC.q4XcY9/LNN0r8Np.394yIiFrTVZSGs6', '2022-04-27 03:46:28', '2022-04-27 11:46:28'),
(33, '', '', '', 'Cruz Mcbride', 'tatipade@mailinator.com', '$2y$10$jOwY1IU0pX.2tv/TZVZv2eBzro4ViWxxnWvbvBjM7wo/ERidVKkkq', '2022-04-27 10:15:42', '2022-04-27 18:15:42'),
(34, '1651068824_f6098fd8981bee93da51.png', '', '', 'Vielka Langley', 'xyvo@mailinator.com', '$2y$10$CjdxtdNapx1BC66Y04AkE.n38zmVCKTVkm9m6guNo.tjQ1qyhm0HS', '2022-04-27 10:40:48', '2022-04-27 18:40:48'),
(35, '', '', '', 'Channing Huffman', 'wijulagum@mailinator.com', '$2y$10$FUwKJxRczr4Ay8bLpFigfeehRNvsoRr.qMKS0VCZK0llbbtkhe1ye', '2022-04-30 11:55:44', '2022-04-30 19:55:44'),
(36, '', '', '', 'Shoshana Spears', 'lywidubiw@mailinator.com', '$2y$10$dSs6u3q9mnecYWpDKxFCk.zAyROsc8721gkcKZiMVAcP3WHe1Ripq', '2022-04-30 12:04:08', '2022-04-30 20:04:08'),
(37, '', '', '', 'Lareina Blanchard', 'vuze@mailinator.com', '$2y$10$E8hnFZ1MbRMT4EI630sVheajr87Bu8Oly.f17qmO8m4PlgzpwGO0a', '2022-04-30 12:04:23', '2022-04-30 20:04:23'),
(38, '', '', '', 'Kaden Baxter', 'cuxezinuji@mailinator.com', '$2y$10$l5bgZ8HQeCcpvrg1oCfDx.zhG/zvAOcVRvRctual1VJG5reN3sV0a', '2022-04-30 12:05:54', '2022-04-30 20:05:54'),
(39, '', '', '', 'Ignacia Henson', 'jevaxemece@mailinator.com', '$2y$10$qCryAde1ZEz6dlFYZXrJuunwmPoQ8e2PH37rdFMBMW2.2gPtrlcSy', '2022-04-30 12:08:03', '2022-04-30 20:08:03');

--
-- Indexes for dumped tables
--

--
-- Indexes for table `forumquestion`
--
ALTER TABLE `forumquestion`
  ADD PRIMARY KEY (`id`),
  ADD KEY `user_id` (`user_id`);

--
-- Indexes for table `forumreply`
--
ALTER TABLE `forumreply`
  ADD UNIQUE KEY `id` (`id`),
  ADD KEY `post_id` (`post_id`),
  ADD KEY `user_id` (`user_id`);

--
-- Indexes for table `lessons`
--
ALTER TABLE `lessons`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `likes`
--
ALTER TABLE `likes`
  ADD PRIMARY KEY (`id`),
  ADD KEY `post_id` (`post_id`),
  ADD KEY `user_id` (`user_id`);

--
-- Indexes for table `post-likes`
--
ALTER TABLE `post-likes`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `users`
--
ALTER TABLE `users`
  ADD PRIMARY KEY (`id`);

--
-- AUTO_INCREMENT for dumped tables
--

--
-- AUTO_INCREMENT for table `forumquestion`
--
ALTER TABLE `forumquestion`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=139;

--
-- AUTO_INCREMENT for table `forumreply`
--
ALTER TABLE `forumreply`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=166;

--
-- AUTO_INCREMENT for table `lessons`
--
ALTER TABLE `lessons`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=22;

--
-- AUTO_INCREMENT for table `likes`
--
ALTER TABLE `likes`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=8;

--
-- AUTO_INCREMENT for table `post-likes`
--
ALTER TABLE `post-likes`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=162;

--
-- AUTO_INCREMENT for table `users`
--
ALTER TABLE `users`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=40;

--
-- Constraints for dumped tables
--

--
-- Constraints for table `forumquestion`
--
ALTER TABLE `forumquestion`
  ADD CONSTRAINT `forumquestion_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE ON UPDATE CASCADE;

--
-- Constraints for table `forumreply`
--
ALTER TABLE `forumreply`
  ADD CONSTRAINT `forumreply_ibfk_1` FOREIGN KEY (`post_id`) REFERENCES `forumquestion` (`id`) ON DELETE CASCADE ON UPDATE CASCADE,
  ADD CONSTRAINT `forumreply_ibfk_2` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE ON UPDATE CASCADE;

--
-- Constraints for table `likes`
--
ALTER TABLE `likes`
  ADD CONSTRAINT `likes_ibfk_1` FOREIGN KEY (`post_id`) REFERENCES `forumquestion` (`id`) ON DELETE CASCADE ON UPDATE CASCADE,
  ADD CONSTRAINT `likes_ibfk_2` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE ON UPDATE CASCADE,
  ADD CONSTRAINT `likes_ibfk_3` FOREIGN KEY (`comment_id`) REFERENCES `forumreply` (`id`) ON DELETE CASCADE ON UPDATE CASCADE;
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
